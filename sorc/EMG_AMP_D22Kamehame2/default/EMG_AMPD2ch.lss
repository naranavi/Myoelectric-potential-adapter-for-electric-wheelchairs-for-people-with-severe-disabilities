
EMG_AMPD2ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000016c8  0000177c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000031a  0080012e  0080012e  000017aa  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  000017aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000080  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000006ae  00000000  00000000  0000182e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001553  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005fb  00000000  00000000  0000342f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001189  00000000  00000000  00003a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00004bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  00004f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000391  00000000  00000000  0000555b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_3>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_4>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 95 02 	jmp	0x52a	; 0x52a <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ec       	ldi	r30, 0xC8	; 200
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 32       	cpi	r26, 0x2E	; 46
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	14 e0       	ldi	r17, 0x04	; 4
      8c:	ae e2       	ldi	r26, 0x2E	; 46
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 34       	cpi	r26, 0x48	; 72
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 23 07 	call	0xe46	; 0xe46 <main>
      9e:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:

//---------------------------------------------------------
// ピン変化割り込み
//---------------------------------------------------------
ISR(PCINT2_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
}
      b0:	0f 90       	pop	r0
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	0f 90       	pop	r0
      b6:	1f 90       	pop	r1
      b8:	18 95       	reti

000000ba <__vector_4>:
ISR(PCINT1_vect)
{
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
}
      c4:	0f 90       	pop	r0
      c6:	0f be       	out	0x3f, r0	; 63
      c8:	0f 90       	pop	r0
      ca:	1f 90       	pop	r1
      cc:	18 95       	reti

000000ce <__vector_3>:

// DRDY 変化割り込み
ISR(PCINT0_vect)
{
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	11 24       	eor	r1, r1
      d8:	8f 93       	push	r24

	if (ads_drdy>0){
      da:	18 99       	sbic	0x03, 0	; 3
      dc:	0b c0       	rjmp	.+22     	; 0xf4 <__vector_3+0x26>
		// DRDY有効なのでSIO開始
		//SPI_Rx_Count = UDR0;					// RXC0フラグクリア
		//SPI_Rx_Count = UDR0;
		
		ADS_CS_ON;
      de:	5a 98       	cbi	0x0b, 2	; 11
		UCSR0B |= (1<<RXCIE0);      // enable RX interrupt
      e0:	80 91 c1 00 	lds	r24, 0x00C1
      e4:	80 68       	ori	r24, 0x80	; 128
      e6:	80 93 c1 00 	sts	0x00C1, r24
		SPI_Rx_Count = 0;
      ea:	10 92 2f 01 	sts	0x012F, r1
		LED_ON;
      ee:	42 9a       	sbi	0x08, 2	; 8
  		// つぎの受信のため送信
		UDR0 = 0; 					// To get Next byte.
      f0:	10 92 c6 00 	sts	0x00C6, r1
	}
//	reti();
}
      f4:	8f 91       	pop	r24
      f6:	0f 90       	pop	r0
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	0f 90       	pop	r0
      fc:	1f 90       	pop	r1
      fe:	18 95       	reti

00000100 <Wait_N_Ticks>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     100:	20 e2       	ldi	r18, 0x20	; 32
     102:	3e e4       	ldi	r19, 0x4E	; 78
     104:	04 c0       	rjmp	.+8      	; 0x10e <Wait_N_Ticks+0xe>
     106:	f9 01       	movw	r30, r18
     108:	31 97       	sbiw	r30, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <Wait_N_Ticks+0x8>
//--------------------------
// delay n*10ms
void Wait_N_Ticks(uint16_t t)
{
	
	for( ; t>0 ; t--){
     10c:	01 97       	sbiw	r24, 0x01	; 1
     10e:	00 97       	sbiw	r24, 0x00	; 0
     110:	d1 f7       	brne	.-12     	; 0x106 <Wait_N_Ticks+0x6>
	 	_delay_ms(10);
	}
}
     112:	08 95       	ret

00000114 <SPI_TxData>:


//--------------------------
// 送信
void SPI_TxData(uint16_t  d)
{
     114:	9c 01       	movw	r18, r24
	uint16_t w;

	ADS_CS_ON;
     116:	5a 98       	cbi	0x0b, 2	; 11

	w = (d<<7);			// bit8 を MSBに
//	w=d;
	UCSR0A = (1<<TXC0);						// 送信終了フラグクリア
     118:	80 e4       	ldi	r24, 0x40	; 64
     11a:	80 93 c0 00 	sts	0x00C0, r24
	while ( !(UCSR0A & (1<<UDRE0)) );	 	// 送信ﾊﾞｯﾌｧ空き待機 
     11e:	80 91 c0 00 	lds	r24, 0x00C0
     122:	85 ff       	sbrs	r24, 5
     124:	fc cf       	rjmp	.-8      	; 0x11e <SPI_TxData+0xa>
	UDR0 = (w >>8);							// ﾃﾞｰﾀ送信(送信開始)
     126:	c9 01       	movw	r24, r18
     128:	96 95       	lsr	r25
     12a:	98 2f       	mov	r25, r24
     12c:	88 27       	eor	r24, r24
     12e:	97 95       	ror	r25
     130:	87 95       	ror	r24
     132:	90 93 c6 00 	sts	0x00C6, r25

//	while ( !(UCSR0A & (1<<UDRE0)) );	 	// 送信ﾊﾞｯﾌｧ空き待機 

	ADS_XCK_OFF;
     136:	5c 98       	cbi	0x0b, 4	; 11
//	ADS_DDR |= (1<<ADS_TXD)|(1<<ADS_XCK);

	if(d & 1){
     138:	20 ff       	sbrs	r18, 0
     13a:	02 c0       	rjmp	.+4      	; 0x140 <SPI_TxData+0x2c>
		// LSB ON
		ADS_TXD_ON;
     13c:	59 9a       	sbi	0x0b, 1	; 11
     13e:	01 c0       	rjmp	.+2      	; 0x142 <SPI_TxData+0x2e>
	}else{
		// LSB OFF
		ADS_TXD_OFF;
     140:	59 98       	cbi	0x0b, 1	; 11
	}



	while ( !(UCSR0A & (1<<TXC0)) );	 	// 送信完了待機 
     142:	80 91 c0 00 	lds	r24, 0x00C0
     146:	86 ff       	sbrs	r24, 6
     148:	fc cf       	rjmp	.-8      	; 0x142 <SPI_TxData+0x2e>


	UCSR0B = (0<<TXEN0);	 				// 送信不許可 
     14a:	10 92 c1 00 	sts	0x00C1, r1
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UDORD0)|(0<<UCPHA0)|(0<<UCPOL0);
     14e:	10 92 c2 00 	sts	0x00C2, r1


	ADS_XCK_ON;
     152:	5c 9a       	sbi	0x0b, 4	; 11
	ADS_XCK_OFF;
     154:	5c 98       	cbi	0x0b, 4	; 11

	// SPIを有効に
	UCSR0C = (1<<UMSEL01)|(1<<UMSEL00)|(0<<UDORD0)|(0<<UCPHA0)|(0<<UCPOL0);
     156:	80 ec       	ldi	r24, 0xC0	; 192
     158:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<TXEN0);	 	// 送信許可 
     15c:	88 e0       	ldi	r24, 0x08	; 8
     15e:	80 93 c1 00 	sts	0x00C1, r24

	ADS_CS_OFF;
     162:	5a 9a       	sbi	0x0b, 2	; 11
}
     164:	08 95       	ret

00000166 <xxSPI_TxData>:

//--------------------------
// SPI送信 ソフトタイプ
void xxSPI_TxData(uint16_t  d)
{
     166:	bc 01       	movw	r22, r24
//	uint16_t w;
	uint16_t p;
	
	p = 0x100;

	ADS_CS_ON;		// 常にONでも動作するが...
     168:	5a 98       	cbi	0x0b, 2	; 11
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	51 e0       	ldi	r21, 0x01	; 1
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	30 e0       	ldi	r19, 0x00	; 0

	while(p>0){
		if(d & p){
     172:	ca 01       	movw	r24, r20
     174:	86 23       	and	r24, r22
     176:	97 23       	and	r25, r23
     178:	89 2b       	or	r24, r25
     17a:	11 f0       	breq	.+4      	; 0x180 <xxSPI_TxData+0x1a>
			// hi
			ADS_TXD_ON;
     17c:	59 9a       	sbi	0x0b, 1	; 11
     17e:	01 c0       	rjmp	.+2      	; 0x182 <xxSPI_TxData+0x1c>
		}else{
			// Low
			ADS_TXD_OFF;
     180:	59 98       	cbi	0x0b, 1	; 11
		}
		ADS_XCK_ON;
     182:	5c 9a       	sbi	0x0b, 4	; 11
		p = p >> 1;
     184:	56 95       	lsr	r21
     186:	47 95       	ror	r20
		ADS_XCK_OFF;
     188:	5c 98       	cbi	0x0b, 4	; 11
     18a:	2f 5f       	subi	r18, 0xFF	; 255
     18c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	p = 0x100;

	ADS_CS_ON;		// 常にONでも動作するが...

	while(p>0){
     18e:	29 30       	cpi	r18, 0x09	; 9
     190:	31 05       	cpc	r19, r1
     192:	79 f7       	brne	.-34     	; 0x172 <xxSPI_TxData+0xc>
		p = p >> 1;
		ADS_XCK_OFF;
		
	}

	ADS_CS_OFF;
     194:	5a 9a       	sbi	0x0b, 2	; 11



}
     196:	08 95       	ret

00000198 <ADS1x9x_Reset>:
/**********************************************************************************************************
* ADS1x9x_Reset			 			                                         						  	  *
**********************************************************************************************************/
void ADS1x9x_Reset(void)
  {
	    ADS_RES_OFF;					// Set High
     198:	5f 9a       	sbi	0x0b, 7	; 11
     19a:	80 ed       	ldi	r24, 0xD0	; 208
     19c:	97 e0       	ldi	r25, 0x07	; 7
     19e:	fc 01       	movw	r30, r24
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <ADS1x9x_Reset+0x8>
	    /* Provide suficient dealy*/
	    _delay_ms(1);						// Wait 1 mSec
	    ADS_RES_ON;						// Set to low
     1a4:	5f 98       	cbi	0x0b, 7	; 11
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <ADS1x9x_Reset+0xe>
	    _delay_ms(1);						// Wait 1 mSec
	    ADS_RES_OFF;					// Set High
     1aa:	5f 9a       	sbi	0x0b, 7	; 11
     1ac:	80 eb       	ldi	r24, 0xB0	; 176
     1ae:	96 e3       	ldi	r25, 0x36	; 54
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <ADS1x9x_Reset+0x18>
	    _delay_ms(7);						// Wait 7 mSec
    }
     1b4:	08 95       	ret

000001b6 <ADS1x9x_Disable_Start>:
/**********************************************************************************************************
* ADS1x9x_Disable_Start						                                          					  *
**********************************************************************************************************/
void ADS1x9x_Disable_Start(void)
{
    ADS_CS_ON;				// Set to LOW
     1b6:	5a 98       	cbi	0x0b, 2	; 11
     1b8:	80 eb       	ldi	r24, 0xB0	; 176
     1ba:	96 e3       	ldi	r25, 0x36	; 54
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <ADS1x9x_Disable_Start+0x6>
	_delay_ms(7);			// Wait 7 mSec
}
     1c0:	08 95       	ret

000001c2 <ADS1x9x_Enable_Start>:
/**********************************************************************************************************
* ADS1x9x_Disable_Start						                                          					  *
**********************************************************************************************************/
void ADS1x9x_Enable_Start(void)
{
    ADS_CS_OFF;				// Set to High
     1c2:	5a 9a       	sbi	0x0b, 2	; 11
     1c4:	88 ee       	ldi	r24, 0xE8	; 232
     1c6:	93 e0       	ldi	r25, 0x03	; 3
     1c8:	28 ec       	ldi	r18, 0xC8	; 200
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	f9 01       	movw	r30, r18
     1ce:	31 97       	sbiw	r30, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <ADS1x9x_Enable_Start+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <ADS1x9x_Enable_Start+0xa>
	_delay_ms(100);			// Wait 10 mSec
}
     1d6:	08 95       	ret

000001d8 <Set_ADS1x9x_Chip_Enable>:
* Set_ADS1x9x_Chip_Enable																                  *
**********************************************************************************************************/
void Set_ADS1x9x_Chip_Enable (void)
{
	/* ADS1x9x CS is Active low*/
	ADS_CS_ON;		// Set to LOW
     1d8:	5a 98       	cbi	0x0b, 2	; 11
}
     1da:	08 95       	ret

000001dc <Clear_ADS1x9x_Chip_Enable>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1dc:	85 e0       	ldi	r24, 0x05	; 5
     1de:	8a 95       	dec	r24
     1e0:	f1 f7       	brne	.-4      	; 0x1de <Clear_ADS1x9x_Chip_Enable+0x2>
void Clear_ADS1x9x_Chip_Enable (void)
  {
  	
  	_delay_us(2);	// 1.5uS (at 1MHz)
	/* ADS1x9x CS is Active low*/
	ADS_CS_OFF;		// Set to High
     1e2:	5a 9a       	sbi	0x0b, 2	; 11
  }
     1e4:	08 95       	ret

000001e6 <Init_ADS1x9x_DRDY_Interrupt>:
* Init_ADS1x9x_DRDY_Interrupt												                                          *
**********************************************************************************************************/
void Init_ADS1x9x_DRDY_Interrupt (void)
{
	
	ADS_DDR &= ~(1<<ADS_DRDY);		// input
     1e6:	50 98       	cbi	0x0a, 0	; 10
	ADS_PORT |= (1<<ADS_DRDY);     	// pull-Up resistance
     1e8:	58 9a       	sbi	0x0b, 0	; 11
	PCIFR |= (1<<ADS_PCIF);			// irt flag clear
     1ea:	d8 9a       	sbi	0x1b, 0	; 27
	ADS_PCMSK &= ~(1<<ADS_DRDY_INT);	// DRDY interrupt disabled
     1ec:	eb e6       	ldi	r30, 0x6B	; 107
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	8e 7f       	andi	r24, 0xFE	; 254
     1f4:	80 83       	st	Z, r24

	
}
     1f6:	08 95       	ret

000001f8 <Enable_ADS1x9x_DRDY_Interrupt>:
/**********************************************************************************************************
* Enable_ADS1x9x_DRDY_Interrupt												                                          *
**********************************************************************************************************/
void Enable_ADS1x9x_DRDY_Interrupt (void)
{
	PCIFR |= (1<<ADS_PCIF);			// irt flag clear
     1f8:	d8 9a       	sbi	0x1b, 0	; 27
 	PCICR |= (1<<ADS_PCIE);			// ピン変化割り込みグループ２可設定
     1fa:	e8 e6       	ldi	r30, 0x68	; 104
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	81 60       	ori	r24, 0x01	; 1
     202:	80 83       	st	Z, r24
	ADS_PCMSK |= (1<<ADS_DRDY_INT);		// ピン変化割り込みDRDY可設定
     204:	eb e6       	ldi	r30, 0x6B	; 107
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	81 60       	ori	r24, 0x01	; 1
     20c:	80 83       	st	Z, r24


}
     20e:	08 95       	ret

00000210 <Disable_ADS1x9x_DRDY_Interrupt>:
/**********************************************************************************************************
* Disable_ADS1x9x_DRDY_Interrupt												                                          *
**********************************************************************************************************/
void Disable_ADS1x9x_DRDY_Interrupt (void)
{
	PCIFR |= (1<<ADS_PCIF);			// irt flag clear
     210:	d8 9a       	sbi	0x1b, 0	; 27
 	//PCICR &= ~(1<<ADS_PCIE);			// ピン変化割り込みグループ２禁止設定
	ADS_PCMSK &= ~(1<<ADS_DRDY_INT);	// ピン変化割り込みDRDY禁止設定
     212:	eb e6       	ldi	r30, 0x6B	; 107
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	8e 7f       	andi	r24, 0xFE	; 254
     21a:	80 83       	st	Z, r24
}
     21c:	08 95       	ret

0000021e <Set_GPIO>:
/**********************************************************************************************************
* Set_GPIO														                                          *
**********************************************************************************************************/
void Set_GPIO(void)
{
	INIPORT;
     21e:	8a b1       	in	r24, 0x0a	; 10
     220:	86 6d       	ori	r24, 0xD6	; 214
     222:	8a b9       	out	0x0a, r24	; 10
     224:	5a 9a       	sbi	0x0b, 2	; 11
     226:	5f 9a       	sbi	0x0b, 7	; 11
     228:	59 98       	cbi	0x0b, 1	; 11
     22a:	5c 98       	cbi	0x0b, 4	; 11
     22c:	5e 98       	cbi	0x0b, 6	; 11
     22e:	28 9a       	sbi	0x05, 0	; 5

}  
     230:	08 95       	ret

00000232 <Set_UCB0_SPI>:
* Set_UCB0_SPI													                                          *
**********************************************************************************************************/
void Set_UCB0_SPI(void)
{

	UBRR0 = (F_CPU /(2*1000000))-1;	// Clock
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	90 93 c5 00 	sts	0x00C5, r25
     23a:	80 93 c4 00 	sts	0x00C4, r24
		
	// SPI動作、MSBから送信、クロック後端、ベースLow
	UCSR0C = (1<<UMSEL01)|(1<<UMSEL00)|(0<<UDORD0)|(1<<UCPHA0)|(0<<UCPOL0); 
     23e:	82 ec       	ldi	r24, 0xC2	; 194
     240:	80 93 c2 00 	sts	0x00C2, r24

	// 送受信可能設定 割り込み禁止 受信可、送信可
	UCSR0B = (0<<RXCIE0)|(0<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     244:	88 e1       	ldi	r24, 0x18	; 24
     246:	80 93 c1 00 	sts	0x00C1, r24
}  
     24a:	08 95       	ret

0000024c <ADS1x9x_SPI_Command_Data>:
* Set_ADS1x9x_Chip_Enable																                  *
**********************************************************************************************************/
void Set_ADS1x9x_Chip_Enable (void)
{
	/* ADS1x9x CS is Active low*/
	ADS_CS_ON;		// Set to LOW
     24c:	5a 98       	cbi	0x0b, 2	; 11
//	for (delayVar = 0; delayVar < 50; delayVar++);
//	Clear_ADS1x9x_Chip_Enable();

	Set_ADS1x9x_Chip_Enable();
	
	UDR0 = Data;                                     // Send the data sitting at the pointer DATA to the TX Buffer
     24e:	80 93 c6 00 	sts	0x00C6, r24
 	while ( !(UCSR0A & (1<<RXC0)) );
     252:	80 91 c0 00 	lds	r24, 0x00C0
     256:	87 ff       	sbrs	r24, 7
     258:	fc cf       	rjmp	.-8      	; 0x252 <ADS1x9x_SPI_Command_Data+0x6>

	delayVar = UDR0;
     25a:	80 91 c6 00 	lds	r24, 0x00C6
     25e:	85 e0       	ldi	r24, 0x05	; 5
     260:	8a 95       	dec	r24
     262:	f1 f7       	brne	.-4      	; 0x260 <ADS1x9x_SPI_Command_Data+0x14>
void Clear_ADS1x9x_Chip_Enable (void)
  {
  	
  	_delay_us(2);	// 1.5uS (at 1MHz)
	/* ADS1x9x CS is Active low*/
	ADS_CS_OFF;		// Set to High
     264:	5a 9a       	sbi	0x0b, 2	; 11

	for (delayVar = 0; delayVar < 150; delayVar++);

	Clear_ADS1x9x_Chip_Enable();

}
     266:	08 95       	ret

00000268 <Init_ADS1x9x_Resource>:
* Init_ADS1x9x_Resource						                                          *
**********************************************************************************************************/

void Init_ADS1x9x_Resource(void)
{
    Set_GPIO();										// Initializes ADS1x9x's input control lines
     268:	0e 94 0f 01 	call	0x21e	; 0x21e <Set_GPIO>
* Set_UCB0_SPI													                                          *
**********************************************************************************************************/
void Set_UCB0_SPI(void)
{

	UBRR0 = (F_CPU /(2*1000000))-1;	// Clock
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	90 93 c5 00 	sts	0x00C5, r25
     274:	80 93 c4 00 	sts	0x00C4, r24
		
	// SPI動作、MSBから送信、クロック後端、ベースLow
	UCSR0C = (1<<UMSEL01)|(1<<UMSEL00)|(0<<UDORD0)|(1<<UCPHA0)|(0<<UCPOL0); 
     278:	82 ec       	ldi	r24, 0xC2	; 194
     27a:	80 93 c2 00 	sts	0x00C2, r24

	// 送受信可能設定 割り込み禁止 受信可、送信可
	UCSR0B = (0<<RXCIE0)|(0<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     27e:	88 e1       	ldi	r24, 0x18	; 24
     280:	80 93 c1 00 	sts	0x00C1, r24
{
    Set_GPIO();										// Initializes ADS1x9x's input control lines
    Set_UCB0_SPI();									// Initialize SPI regs.
    //Set_DMA_SPI();	   								// Initialize DMA regs for SPI.
    
}
     284:	08 95       	ret

00000286 <Wake_Up_ADS1x9x>:
/**********************************************************************************************************
* Wake_Up_ADS1x9x						                                          						  *
**********************************************************************************************************/
void Wake_Up_ADS1x9x (void)
  { 
    ADS1x9x_SPI_Command_Data (WAKEUP);                   // Send 0x02 to the ADS1x9x                                                      
     286:	82 e0       	ldi	r24, 0x02	; 2
     288:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
  }
     28c:	08 95       	ret

0000028e <Put_ADS1x9x_In_Sleep>:
/**********************************************************************************************************
* Put_ADS1x9x_In_Sleep						                                          					  *
**********************************************************************************************************/
void Put_ADS1x9x_In_Sleep (void)
  {
    ADS1x9x_SPI_Command_Data (STANDBY);                 // Send 0x04 to the ADS1x9x
     28e:	84 e0       	ldi	r24, 0x04	; 4
     290:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
  }
     294:	08 95       	ret

00000296 <Soft_Reset_ADS1x9x>:
* Soft_Reset_ADS1x9x					                                          						  *
**********************************************************************************************************/

void Soft_Reset_ADS1x9x (void)
  {
    ADS1x9x_SPI_Command_Data (RESET);                   // Send 0x06 to the ADS1x9x
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
  }
     29c:	08 95       	ret

0000029e <Soft_Start_ReStart_ADS1x9x>:
* Soft_Start_ReStart_ADS1x9x			                                          						  *
**********************************************************************************************************/

void Soft_Start_ReStart_ADS1x9x (void)
  {
    ADS1x9x_SPI_Command_Data (START);                  // Send 0x08 to the ADS1x9x
     29e:	88 e0       	ldi	r24, 0x08	; 8
     2a0:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
     2a4:	85 e0       	ldi	r24, 0x05	; 5
     2a6:	8a 95       	dec	r24
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <Soft_Start_ReStart_ADS1x9x+0x8>
void Clear_ADS1x9x_Chip_Enable (void)
  {
  	
  	_delay_us(2);	// 1.5uS (at 1MHz)
	/* ADS1x9x CS is Active low*/
	ADS_CS_OFF;		// Set to High
     2aa:	5a 9a       	sbi	0x0b, 2	; 11

void Soft_Start_ReStart_ADS1x9x (void)
  {
    ADS1x9x_SPI_Command_Data (START);                  // Send 0x08 to the ADS1x9x
    Clear_ADS1x9x_Chip_Enable ();                                                       
  }
     2ac:	08 95       	ret

000002ae <Hard_Start_ReStart_ADS1x9x>:
**********************************************************************************************************/

void Hard_Start_ReStart_ADS1x9x(void)
  {
	//P8OUT |= (enum PORT8_ADC_CONTROL)ADC_START;			// Set Start pin to High
  }
     2ae:	08 95       	ret

000002b0 <Soft_Start_ADS1x9x>:
* Soft_Start_ADS1x9x					                                          						  *
**********************************************************************************************************/

void Soft_Start_ADS1x9x (void)
  {
    ADS1x9x_SPI_Command_Data (START);                   // Send 0x0A to the ADS1x9x
     2b0:	88 e0       	ldi	r24, 0x08	; 8
     2b2:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
  }
     2b6:	08 95       	ret

000002b8 <Soft_Stop_ADS1x9x>:
* Soft_Stop_ADS1x9x					                                          						  *
**********************************************************************************************************/

void Soft_Stop_ADS1x9x (void)
  {
    ADS1x9x_SPI_Command_Data (STOP);                   // Send 0x0A to the ADS1x9x
     2b8:	8a e0       	ldi	r24, 0x0A	; 10
     2ba:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
  }
     2be:	08 95       	ret

000002c0 <Hard_Stop_ADS1x9x>:
**********************************************************************************************************/

void Hard_Stop_ADS1x9x (void)
  {
  	unsigned short i, j;
    ADS_START_OFF;		// Set Start pin to Low
     2c0:	5e 98       	cbi	0x0b, 6	; 11
    for (j = 0; j < DELAY_COUNT; j++)
    {
    	for ( i=0; i < 35000; i++);
    }
  }
     2c2:	08 95       	ret

000002c4 <Stop_Read_Data_Continuous>:
* Soft_Start_ReStart_ADS1x9x			                                          						  *
**********************************************************************************************************/

void Stop_Read_Data_Continuous (void)
  {
    ADS1x9x_SPI_Command_Data(SDATAC);					// Send Stop Read Data Continuously mode
     2c4:	81 e1       	ldi	r24, 0x11	; 17
     2c6:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
  }
     2ca:	08 95       	ret

000002cc <Start_Read_Data_Continuous>:
* Start_Read_Data_Continuous			                                          						  *
**********************************************************************************************************/

void Start_Read_Data_Continuous (void)
  {
    ADS1x9x_SPI_Command_Data (RDATAC);					// Send Enable Read Data Continuous mode.
     2cc:	80 e1       	ldi	r24, 0x10	; 16
     2ce:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
  }
     2d2:	08 95       	ret

000002d4 <Start_Data_Conv_Command>:
* Start_Data_Conv_Command			                                          						  *
**********************************************************************************************************/

void Start_Data_Conv_Command (void)
  {
    ADS1x9x_SPI_Command_Data (START);					// Send 0x08 to the ADS1x9x
     2d4:	88 e0       	ldi	r24, 0x08	; 8
     2d6:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
  }
     2da:	08 95       	ret

000002dc <Init_ADS1x9x>:
/**********************************************************************************************************
* Initialize ADS1x9x						                                          *
**********************************************************************************************************/
void Init_ADS1x9x (void)
{
	ADS1x9x_Reset();
     2dc:	0e 94 cc 00 	call	0x198	; 0x198 <ADS1x9x_Reset>
/**********************************************************************************************************
* ADS1x9x_Disable_Start						                                          					  *
**********************************************************************************************************/
void ADS1x9x_Disable_Start(void)
{
    ADS_CS_ON;				// Set to LOW
     2e0:	5a 98       	cbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2e2:	80 eb       	ldi	r24, 0xB0	; 176
     2e4:	96 e3       	ldi	r25, 0x36	; 54
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <Init_ADS1x9x+0xa>
**********************************************************************************************************/
void Init_ADS1x9x (void)
{
	ADS1x9x_Reset();
	ADS1x9x_Disable_Start();
	ADS1x9x_Enable_Start();
     2ea:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <ADS1x9x_Enable_Start>
}
     2ee:	08 95       	ret

000002f0 <enable_ADS1x9x_Conversion>:
/**********************************************************************************************************
* enable_ADS1x9x_Conversion													                          *
**********************************************************************************************************/
void enable_ADS1x9x_Conversion (void)
  {
    Start_Read_Data_Continuous ();		//RDATAC command
     2f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <Start_Read_Data_Continuous>
    
    Hard_Start_ReStart_ADS1x9x();

  }
     2f4:	08 95       	ret

000002f6 <ADS1x9x_Reg_Write>:
**********************************************************************************************************/

void ADS1x9x_Reg_Write (unsigned char READ_WRITE_ADDRESS, unsigned char DATA)
  { 
  	short i;
  	switch (READ_WRITE_ADDRESS)
     2f6:	87 30       	cpi	r24, 0x07	; 7
     2f8:	d1 f0       	breq	.+52     	; 0x32e <ADS1x9x_Reg_Write+0x38>
     2fa:	88 30       	cpi	r24, 0x08	; 8
     2fc:	38 f4       	brcc	.+14     	; 0x30c <ADS1x9x_Reg_Write+0x16>
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	81 f0       	breq	.+32     	; 0x322 <ADS1x9x_Reg_Write+0x2c>
     302:	83 30       	cpi	r24, 0x03	; 3
     304:	89 f0       	breq	.+34     	; 0x328 <ADS1x9x_Reg_Write+0x32>
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	e1 f4       	brne	.+56     	; 0x342 <ADS1x9x_Reg_Write+0x4c>
     30a:	09 c0       	rjmp	.+18     	; 0x31e <ADS1x9x_Reg_Write+0x28>
     30c:	89 30       	cpi	r24, 0x09	; 9
     30e:	99 f0       	breq	.+38     	; 0x336 <ADS1x9x_Reg_Write+0x40>
     310:	89 30       	cpi	r24, 0x09	; 9
     312:	78 f0       	brcs	.+30     	; 0x332 <ADS1x9x_Reg_Write+0x3c>
     314:	8a 30       	cpi	r24, 0x0A	; 10
     316:	89 f0       	breq	.+34     	; 0x33a <ADS1x9x_Reg_Write+0x44>
     318:	8b 30       	cpi	r24, 0x0B	; 11
     31a:	99 f4       	brne	.+38     	; 0x342 <ADS1x9x_Reg_Write+0x4c>
     31c:	11 c0       	rjmp	.+34     	; 0x340 <ADS1x9x_Reg_Write+0x4a>
  	{
  		case 1:
  			DATA = DATA & 0x87;
     31e:	67 78       	andi	r22, 0x87	; 135
     320:	10 c0       	rjmp	.+32     	; 0x342 <ADS1x9x_Reg_Write+0x4c>
  		break;
  		case 2:
  			DATA = DATA & 0xFB;
     322:	6b 7f       	andi	r22, 0xFB	; 251
  			DATA |= 0x80;
     324:	60 68       	ori	r22, 0x80	; 128
     326:	0d c0       	rjmp	.+26     	; 0x342 <ADS1x9x_Reg_Write+0x4c>
  			
  		break;
  		case 3:
  			DATA = DATA & 0xFD;
     328:	6d 7f       	andi	r22, 0xFD	; 253
  			DATA |= 0x10;
     32a:	60 61       	ori	r22, 0x10	; 16
     32c:	0a c0       	rjmp	.+20     	; 0x342 <ADS1x9x_Reg_Write+0x4c>
  			
  		break;
  		case 7:
  			DATA = DATA & 0x3F;
     32e:	6f 73       	andi	r22, 0x3F	; 63
     330:	08 c0       	rjmp	.+16     	; 0x342 <ADS1x9x_Reg_Write+0x4c>
  		break;
  		case 8:
  			DATA = DATA & 0x5F;
     332:	6f 75       	andi	r22, 0x5F	; 95
     334:	06 c0       	rjmp	.+12     	; 0x342 <ADS1x9x_Reg_Write+0x4c>
  		break;
  		case 9:
  			DATA |= 0x02;
     336:	62 60       	ori	r22, 0x02	; 2
     338:	04 c0       	rjmp	.+8      	; 0x342 <ADS1x9x_Reg_Write+0x4c>
  		break;
  		case 10:
  			DATA = DATA & 0x87;
     33a:	67 78       	andi	r22, 0x87	; 135
  			DATA |= 0x01;
     33c:	61 60       	ori	r22, 0x01	; 1
     33e:	01 c0       	rjmp	.+2      	; 0x342 <ADS1x9x_Reg_Write+0x4c>
  		break;
  		case 11:
  			DATA = DATA & 0x0F;
     340:	6f 70       	andi	r22, 0x0F	; 15
  		default:
  		
  		break;
  		
  	}
	SPI_Tx_buf[0] = READ_WRITE_ADDRESS | WREG;
     342:	80 64       	ori	r24, 0x40	; 64
     344:	80 93 04 02 	sts	0x0204, r24
	SPI_Tx_buf[1] = 0;						// Write Single byte
     348:	10 92 05 02 	sts	0x0205, r1
	SPI_Tx_buf[2] = DATA;					// Write Single byte
     34c:	60 93 06 02 	sts	0x0206, r22
* Set_ADS1x9x_Chip_Enable																                  *
**********************************************************************************************************/
void Set_ADS1x9x_Chip_Enable (void)
{
	/* ADS1x9x CS is Active low*/
	ADS_CS_ON;		// Set to LOW
     350:	5a 98       	cbi	0x0b, 2	; 11
	SPI_Tx_buf[2] = DATA;					// Write Single byte
	Set_ADS1x9x_Chip_Enable();
	
	for ( i =0; i < 50;i++);

	UDR0 = SPI_Tx_buf[0];              // Send the first data to the TX Buffer
     352:	80 93 c6 00 	sts	0x00C6, r24
 	while ( !(UCSR0A & (1<<RXC0)) );			// USCI_B0 TX buffer ready?
     356:	80 91 c0 00 	lds	r24, 0x00C0
     35a:	87 ff       	sbrs	r24, 7
     35c:	fc cf       	rjmp	.-8      	; 0x356 <ADS1x9x_Reg_Write+0x60>
	i = UDR0;							// Read Rx buf
     35e:	80 91 c6 00 	lds	r24, 0x00C6

	UDR0 = SPI_Tx_buf[1];              // Send the first data to the TX Buffer
     362:	80 91 05 02 	lds	r24, 0x0205
     366:	80 93 c6 00 	sts	0x00C6, r24
	while ( !(UCSR0A & (1<<RXC0)) );			// USCI_B0 TX buffer ready?
     36a:	80 91 c0 00 	lds	r24, 0x00C0
     36e:	87 ff       	sbrs	r24, 7
     370:	fc cf       	rjmp	.-8      	; 0x36a <ADS1x9x_Reg_Write+0x74>
	i = UDR0;
     372:	80 91 c6 00 	lds	r24, 0x00C6
	UDR0 = SPI_Tx_buf[2];              // Send the first data to the TX Buffer
     376:	60 93 c6 00 	sts	0x00C6, r22
	while ( !(UCSR0A & (1<<RXC0)) );			// USCI_B0 TX buffer ready?
     37a:	80 91 c0 00 	lds	r24, 0x00C0
     37e:	87 ff       	sbrs	r24, 7
     380:	fc cf       	rjmp	.-8      	; 0x37a <ADS1x9x_Reg_Write+0x84>
	i = UDR0;
     382:	80 91 c6 00 	lds	r24, 0x00C6

  }
     386:	08 95       	ret

00000388 <ADS1x9x_Reg_Read>:
* ADS1x9x_Reg_Read																	                 *
**********************************************************************************************************/
  unsigned char ADS1x9x_Reg_Read(unsigned char Reg_address)
  {
  		unsigned char retVal;
		SPI_Tx_buf[0] = Reg_address | RREG;
     388:	80 62       	ori	r24, 0x20	; 32
     38a:	80 93 04 02 	sts	0x0204, r24
		SPI_Tx_buf[1] = 0;							// Read number of bytes - 1
     38e:	10 92 05 02 	sts	0x0205, r1
* Set_ADS1x9x_Chip_Enable																                  *
**********************************************************************************************************/
void Set_ADS1x9x_Chip_Enable (void)
{
	/* ADS1x9x CS is Active low*/
	ADS_CS_ON;		// Set to LOW
     392:	5a 98       	cbi	0x0b, 2	; 11
		SPI_Tx_buf[0] = Reg_address | RREG;
		SPI_Tx_buf[1] = 0;							// Read number of bytes - 1
		
		Set_ADS1x9x_Chip_Enable();					// Set chip select to low
		
		UDR0 = SPI_Tx_buf[0];                  // Send the first data to the TX Buffer
     394:	80 93 c6 00 	sts	0x00C6, r24
		while ( !(UCSR0A & (1<<RXC0)) );				// USCI_B0 TX buffer ready?
     398:	80 91 c0 00 	lds	r24, 0x00C0
     39c:	87 ff       	sbrs	r24, 7
     39e:	fc cf       	rjmp	.-8      	; 0x398 <ADS1x9x_Reg_Read+0x10>
		UDR0 = SPI_Tx_buf[1];                  // Send the first data to the TX Buffer
     3a0:	10 92 c6 00 	sts	0x00C6, r1
		while ( !(UCSR0A & (1<<RXC0)) );				// USCI_B0 TX buffer ready?
     3a4:	80 91 c0 00 	lds	r24, 0x00C0
     3a8:	87 ff       	sbrs	r24, 7
     3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <ADS1x9x_Reg_Read+0x1c>
		retVal = UDR0;							// Read RX buff
     3ac:	80 91 c6 00 	lds	r24, 0x00C6
		UDR0 = 0x00;                           // Send the first data to the TX Buffer
     3b0:	10 92 c6 00 	sts	0x00C6, r1
		while ( !(UCSR0A & (1<<RXC0)) );				// USCI_B0 TX buffer ready?
     3b4:	80 91 c0 00 	lds	r24, 0x00C0
     3b8:	87 ff       	sbrs	r24, 7
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <ADS1x9x_Reg_Read+0x2c>
		retVal = UDR0;							// Read RX buff
     3bc:	80 91 c6 00 	lds	r24, 0x00C6
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3c0:	95 e0       	ldi	r25, 0x05	; 5
     3c2:	9a 95       	dec	r25
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <ADS1x9x_Reg_Read+0x3a>
void Clear_ADS1x9x_Chip_Enable (void)
  {
  	
  	_delay_us(2);	// 1.5uS (at 1MHz)
	/* ADS1x9x CS is Active low*/
	ADS_CS_OFF;		// Set to High
     3c6:	5a 9a       	sbi	0x0b, 2	; 11
     3c8:	9a e0       	ldi	r25, 0x0A	; 10
     3ca:	9a 95       	dec	r25
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <ADS1x9x_Reg_Read+0x42>
		retVal = UDR0;							// Read RX buff

		Clear_ADS1x9x_Chip_Enable();				// Disable chip select
		_delay_us(4);
		return 	retVal;
  }
     3ce:	08 95       	ret

000003d0 <Calib_Run>:

/**********************************************************************************************************
*	        ADS1x9x キャリブレーション実行          				                  					  *
**********************************************************************************************************/
void Calib_Run()
{
     3d0:	1f 93       	push	r17
	BYTE d;

	// 0Ah:CALIB_ON <-1
	d = (1<<CALIB_ON) | ADS1x9x_Default_Register_Settings[ADS1x9x_REG_RESP2];
     3d2:	10 91 29 01 	lds	r17, 0x0129
     3d6:	10 68       	ori	r17, 0x80	; 128
	ADS1x9x_Reg_Write(ADS1x9x_REG_RESP2,d);
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	61 2f       	mov	r22, r17
     3dc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <ADS1x9x_Reg_Write>

	// OFFSETCAL コマンド
    ADS1x9x_SPI_Command_Data (OFFSETCAL);					// Send 0x1A to the ADS1x9x
     3e0:	8a e1       	ldi	r24, 0x1A	; 26
     3e2:	0e 94 26 01 	call	0x24c	; 0x24c <ADS1x9x_SPI_Command_Data>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3e6:	80 e2       	ldi	r24, 0x20	; 32
     3e8:	9e e4       	ldi	r25, 0x4E	; 78
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <Calib_Run+0x1a>
 	 _delay_ms(10);


	// 0Ah:CALIB_ON <-0 戻す
	d &= ~(1<<CALIB_ON);
	ADS1x9x_Reg_Write(ADS1x9x_REG_RESP2,d);
     3ee:	1f 77       	andi	r17, 0x7F	; 127
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
     3f2:	61 2f       	mov	r22, r17
     3f4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <ADS1x9x_Reg_Write>


}
     3f8:	1f 91       	pop	r17
     3fa:	08 95       	ret

000003fc <ADS1x9x_Default_Reg_Init>:
/**********************************************************************************************************
*	        ADS1x9x default Initialization          				                  					  *
**********************************************************************************************************/

void ADS1x9x_Default_Reg_Init(void)
{
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
* Set_ADS1x9x_Chip_Enable																                  *
**********************************************************************************************************/
void Set_ADS1x9x_Chip_Enable (void)
{
	/* ADS1x9x CS is Active low*/
	ADS_CS_ON;		// Set to LOW
     402:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     404:	85 e0       	ldi	r24, 0x05	; 5
     406:	8a 95       	dec	r24
     408:	f1 f7       	brne	.-4      	; 0x406 <ADS1x9x_Default_Reg_Init+0xa>
void Clear_ADS1x9x_Chip_Enable (void)
  {
  	
  	_delay_us(2);	// 1.5uS (at 1MHz)
	/* ADS1x9x CS is Active low*/
	ADS_CS_OFF;		// Set to High
     40a:	5a 9a       	sbi	0x0b, 2	; 11
     40c:	c0 e2       	ldi	r28, 0x20	; 32
     40e:	d1 e0       	ldi	r29, 0x01	; 1
     410:	11 e0       	ldi	r17, 0x01	; 1
	for ( Reg_Init_i =0; Reg_Init_i <100;Reg_Init_i++);
	Clear_ADS1x9x_Chip_Enable();

	for ( Reg_Init_i = 1; Reg_Init_i < 12; Reg_Init_i++)
	{
		ADS1x9x_Reg_Write(Reg_Init_i,ADS1x9x_Default_Register_Settings[Reg_Init_i]);
     412:	81 2f       	mov	r24, r17
     414:	69 91       	ld	r22, Y+
     416:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <ADS1x9x_Reg_Write>
	unsigned char Reg_Init_i;
	Set_ADS1x9x_Chip_Enable();
	for ( Reg_Init_i =0; Reg_Init_i <100;Reg_Init_i++);
	Clear_ADS1x9x_Chip_Enable();

	for ( Reg_Init_i = 1; Reg_Init_i < 12; Reg_Init_i++)
     41a:	1f 5f       	subi	r17, 0xFF	; 255
     41c:	1c 30       	cpi	r17, 0x0C	; 12
     41e:	c9 f7       	brne	.-14     	; 0x412 <ADS1x9x_Default_Reg_Init+0x16>
	{
		ADS1x9x_Reg_Write(Reg_Init_i,ADS1x9x_Default_Register_Settings[Reg_Init_i]);
	}

}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	08 95       	ret

00000428 <ADS1x9x_Read_All_Regs>:
/**********************************************************************************************************
*	        ADS1x9x_Read_All_Regs          				                  					  *
**********************************************************************************************************/

void ADS1x9x_Read_All_Regs(unsigned char ADS1x9xeg_buf[])
{
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ec 01       	movw	r28, r24
     430:	10 e0       	ldi	r17, 0x00	; 0
	Clear_ADS1x9x_Chip_Enable();
	_delay_us(10);
*/
	for ( Regs_i = 0; Regs_i < 12; Regs_i++)
	{
		ADS1x9xeg_buf[Regs_i] = ADS1x9x_Reg_Read(Regs_i);
     432:	81 2f       	mov	r24, r17
     434:	0e 94 c4 01 	call	0x388	; 0x388 <ADS1x9x_Reg_Read>
     438:	89 93       	st	Y+, r24
/*	Set_ADS1x9x_Chip_Enable();
	for ( Regs_i =0; Regs_i <200;Regs_i++);
	Clear_ADS1x9x_Chip_Enable();
	_delay_us(10);
*/
	for ( Regs_i = 0; Regs_i < 12; Regs_i++)
     43a:	1f 5f       	subi	r17, 0xFF	; 255
     43c:	1c 30       	cpi	r17, 0x0C	; 12
     43e:	c9 f7       	brne	.-14     	; 0x432 <ADS1x9x_Read_All_Regs+0xa>
		ADS1x9xeg_buf[Regs_i] = ADS1x9x_Reg_Read(Regs_i);
	//	_delay_us(10);

	}

}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	08 95       	ret

00000448 <ADS1x9x_PowerOn_Init>:
/*********************************************************************************************************/
/**********************************************************************************************************
*	        ADS1x9x_PowerOn_Init          				                  					  			  *
***********************************************************************************************************/
void ADS1x9x_PowerOn_Init(void)
{
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
   WORD d1,d2;

	d1=d2=0;


   Init_ADS1x9x_Resource();		// MPUのSPI & i/o設定
     44c:	0e 94 34 01 	call	0x268	; 0x268 <Init_ADS1x9x_Resource>
     450:	80 e9       	ldi	r24, 0x90	; 144
     452:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     454:	28 ec       	ldi	r18, 0xC8	; 200
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	f9 01       	movw	r30, r18
     45a:	31 97       	sbiw	r30, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <ADS1x9x_PowerOn_Init+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     45e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     460:	d9 f7       	brne	.-10     	; 0x458 <ADS1x9x_PowerOn_Init+0x10>
   _delay_ms(40);

   ADS1x9x_Reset();				// ADC reset
     462:	0e 94 cc 00 	call	0x198	; 0x198 <ADS1x9x_Reset>

   //Init_ADS1x9x_DRDY_Interrupt();
  sled_ini();
     466:	0e 94 9d 07 	call	0xf3a	; 0xf3a <sled_ini>
     46a:	00 ea       	ldi	r16, 0xA0	; 160
     46c:	1f e0       	ldi	r17, 0x0F	; 15
     46e:	c8 01       	movw	r24, r16
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <ADS1x9x_PowerOn_Init+0x28>
    _delay_ms(2);


//   Hard_Stop_ADS1x9x();

	 Wake_Up_ADS1x9x ();			// SPI_Command_Data (WAKEUP);
     474:	0e 94 43 01 	call	0x286	; 0x286 <Wake_Up_ADS1x9x>
   
   Start_Data_Conv_Command();		// start command
     478:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Start_Data_Conv_Command>
   

   Soft_Stop_ADS1x9x();				// stop command
     47c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Soft_Stop_ADS1x9x>
     480:	c8 01       	movw	r24, r16
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <ADS1x9x_PowerOn_Init+0x3a>


   _delay_ms(2);


   	Stop_Read_Data_Continuous();					// SDATAC command(Stop Read Data Continuously mode)
     486:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Stop_Read_Data_Continuous>
     48a:	c8 01       	movw	r24, r16
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <ADS1x9x_PowerOn_Init+0x44>

 	 _delay_ms(2);

	ADS1x9x_Default_Reg_Init();				// レジスター初期値設定
     490:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADS1x9x_Default_Reg_Init>

//	Calib_Run();							// 	キャリブレーション


	Start_Read_Data_Continuous();			// 連続変換
     494:	0e 94 66 01 	call	0x2cc	; 0x2cc <Start_Read_Data_Continuous>

 	
	//ADS1292_24BIT:
	SPI_Rx_exp_Count=9;		// 3 byte status + 3 bytes ch1 data + 3 bytes CH0 data
     498:	89 e0       	ldi	r24, 0x09	; 9
     49a:	80 93 30 01 	sts	0x0130, r24
	ADS_CS_OFF;
     49e:	5a 9a       	sbi	0x0b, 2	; 11

	Soft_Start_ADS1x9x ();					// start
     4a0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Soft_Start_ADS1x9x>
	// 受信開始
	Enable_ADS1x9x_DRDY_Interrupt();
     4a4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Enable_ADS1x9x_DRDY_Interrupt>

	sei();
     4a8:	78 94       	sei
		}

		if (stat1 & (1<<2|1<<1)){
			// 電極外れ 点滅
			if(timer1 & 0x20){
				LED_RIGHT_ON;
     4aa:	0f ef       	ldi	r16, 0xFF	; 255

	for(;;){


//		LED_RED_ON;
		while(val_flag==0);
     4ac:	80 91 32 01 	lds	r24, 0x0132
     4b0:	88 23       	and	r24, r24
     4b2:	e1 f3       	breq	.-8      	; 0x4ac <ADS1x9x_PowerOn_Init+0x64>
		val_flag=0;
     4b4:	10 92 32 01 	sts	0x0132, r1
		pwm_A(ch_A);
     4b8:	80 91 38 01 	lds	r24, 0x0138
     4bc:	90 91 39 01 	lds	r25, 0x0139
     4c0:	0e 94 d2 06 	call	0xda4	; 0xda4 <pwm_A>
		pwm_B(ch_B);
     4c4:	80 91 3a 01 	lds	r24, 0x013A
     4c8:	90 91 3b 01 	lds	r25, 0x013B
     4cc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <pwm_B>

		if ((stat1 & (1<<0)) + (stat2 & 1<<7)){
     4d0:	20 91 33 01 	lds	r18, 0x0133
     4d4:	80 91 34 01 	lds	r24, 0x0134
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	80 78       	andi	r24, 0x80	; 128
     4dc:	90 70       	andi	r25, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	21 70       	andi	r18, 0x01	; 1
     4e2:	30 70       	andi	r19, 0x00	; 0
     4e4:	82 0f       	add	r24, r18
     4e6:	93 1f       	adc	r25, r19
     4e8:	89 2b       	or	r24, r25
     4ea:	41 f0       	breq	.+16     	; 0x4fc <ADS1x9x_PowerOn_Init+0xb4>
			// 電極外れ 点滅
			if(timer1 & 0x20){
     4ec:	80 91 36 01 	lds	r24, 0x0136
     4f0:	85 ff       	sbrs	r24, 5
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <ADS1x9x_PowerOn_Init+0xb0>
				LED_LEFT_ON;
     4f4:	07 bd       	out	0x27, r16	; 39
     4f6:	07 c0       	rjmp	.+14     	; 0x506 <ADS1x9x_PowerOn_Init+0xbe>
			}else{
				LED_LEFT_OFF;
     4f8:	17 bc       	out	0x27, r1	; 39
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <ADS1x9x_PowerOn_Init+0xbe>
			}
		}else{
			LED_LEFT_PWM = ch_A;
     4fc:	80 91 38 01 	lds	r24, 0x0138
     500:	90 91 39 01 	lds	r25, 0x0139
     504:	87 bd       	out	0x27, r24	; 39
		}

		if (stat1 & (1<<2|1<<1)){
     506:	80 91 33 01 	lds	r24, 0x0133
     50a:	86 70       	andi	r24, 0x06	; 6
     50c:	41 f0       	breq	.+16     	; 0x51e <ADS1x9x_PowerOn_Init+0xd6>
			// 電極外れ 点滅
			if(timer1 & 0x20){
     50e:	80 91 36 01 	lds	r24, 0x0136
     512:	85 ff       	sbrs	r24, 5
     514:	02 c0       	rjmp	.+4      	; 0x51a <ADS1x9x_PowerOn_Init+0xd2>
				LED_RIGHT_ON;
     516:	08 bd       	out	0x28, r16	; 40
     518:	c9 cf       	rjmp	.-110    	; 0x4ac <ADS1x9x_PowerOn_Init+0x64>
			}else{
				LED_RIGHT_OFF;
     51a:	18 bc       	out	0x28, r1	; 40
     51c:	c7 cf       	rjmp	.-114    	; 0x4ac <ADS1x9x_PowerOn_Init+0x64>
			}
		}else{
			LED_RIGHT_PWM = ch_B;
     51e:	80 91 3a 01 	lds	r24, 0x013A
     522:	90 91 3b 01 	lds	r25, 0x013B
     526:	88 bd       	out	0x28, r24	; 40
     528:	c1 cf       	rjmp	.-126    	; 0x4ac <ADS1x9x_PowerOn_Init+0x64>

0000052a <__vector_18>:
}


// SCI受信割り込み
ISR(USART_RX_vect)
{
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	2f 93       	push	r18
     546:	3f 93       	push	r19
     548:	4f 93       	push	r20
     54a:	5f 93       	push	r21
     54c:	6f 93       	push	r22
     54e:	7f 93       	push	r23
     550:	8f 93       	push	r24
     552:	9f 93       	push	r25
     554:	af 93       	push	r26
     556:	bf 93       	push	r27
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	ef 93       	push	r30
     55e:	ff 93       	push	r31
		int i;
       	
      	SPI_Rx_buf[SPI_Rx_Count] = UDR0;		// in data
     560:	e0 91 2f 01 	lds	r30, 0x012F
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 91 c6 00 	lds	r24, 0x00C6
     56a:	e8 50       	subi	r30, 0x08	; 8
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	80 83       	st	Z, r24
      	SPI_Rx_Count++;
     570:	80 91 2f 01 	lds	r24, 0x012F
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	80 93 2f 01 	sts	0x012F, r24
      	if ( SPI_Rx_Count == SPI_Rx_exp_Count){
     57a:	90 91 2f 01 	lds	r25, 0x012F
     57e:	80 91 30 01 	lds	r24, 0x0130
     582:	98 17       	cp	r25, r24
     584:	09 f0       	breq	.+2      	; 0x588 <__vector_18+0x5e>
     586:	c2 c3       	rjmp	.+1924   	; 0xd0c <__stack+0x40d>
			// 指定数受信完了
			UCSR0B &= ~(1<<RXCIE0);                 // Disable RX interrupt
     588:	80 91 c1 00 	lds	r24, 0x00C1
     58c:	8f 77       	andi	r24, 0x7F	; 127
     58e:	80 93 c1 00 	sts	0x00C1, r24
			ADS_CS_OFF;
     592:	5a 9a       	sbi	0x0b, 2	; 11
			stat1 = SPI_Rx_buf[0];
     594:	80 91 f8 01 	lds	r24, 0x01F8
     598:	80 93 33 01 	sts	0x0133, r24
			stat2 = SPI_Rx_buf[1];
     59c:	80 91 f9 01 	lds	r24, 0x01F9
     5a0:	80 93 34 01 	sts	0x0134, r24
			stat3 = SPI_Rx_buf[2];
     5a4:	80 91 fa 01 	lds	r24, 0x01FA
     5a8:	80 93 35 01 	sts	0x0135, r24
			timer1++;
     5ac:	80 91 36 01 	lds	r24, 0x0136
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	80 93 36 01 	sts	0x0136, r24
			timer2++;
     5b6:	80 91 37 01 	lds	r24, 0x0137
     5ba:	8f 5f       	subi	r24, 0xFF	; 255
     5bc:	80 93 37 01 	sts	0x0137, r24



//ch1　右側

			uw1 = (ULONG)SPI_Rx_buf[3]<<16 | (ULONG)SPI_Rx_buf[4]<<8 |(ULONG)SPI_Rx_buf[5];
     5c0:	80 91 fb 01 	lds	r24, 0x01FB
     5c4:	20 91 fc 01 	lds	r18, 0x01FC
     5c8:	e0 90 fd 01 	lds	r14, 0x01FD
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	a0 e0       	ldi	r26, 0x00	; 0
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	dc 01       	movw	r26, r24
     5d4:	99 27       	eor	r25, r25
     5d6:	88 27       	eor	r24, r24
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	54 2f       	mov	r21, r20
     5e0:	43 2f       	mov	r20, r19
     5e2:	32 2f       	mov	r19, r18
     5e4:	22 27       	eor	r18, r18
     5e6:	82 2b       	or	r24, r18
     5e8:	93 2b       	or	r25, r19
     5ea:	a4 2b       	or	r26, r20
     5ec:	b5 2b       	or	r27, r21
     5ee:	ff 24       	eor	r15, r15
     5f0:	00 e0       	ldi	r16, 0x00	; 0
     5f2:	10 e0       	ldi	r17, 0x00	; 0
     5f4:	8e 29       	or	r24, r14
     5f6:	9f 29       	or	r25, r15
     5f8:	a0 2b       	or	r26, r16
     5fa:	b1 2b       	or	r27, r17
     5fc:	80 93 74 01 	sts	0x0174, r24
     600:	90 93 75 01 	sts	0x0175, r25
     604:	a0 93 76 01 	sts	0x0176, r26
     608:	b0 93 77 01 	sts	0x0177, r27
		//	uw1 =0xffc00001;
			if (SPI_Rx_buf[3] & 0x80){
     60c:	80 91 fb 01 	lds	r24, 0x01FB
     610:	87 ff       	sbrs	r24, 7
     612:	0a c0       	rjmp	.+20     	; 0x628 <__vector_18+0xfe>
				w1 = uw1 | 0xff000000;
     614:	80 91 74 01 	lds	r24, 0x0174
     618:	90 91 75 01 	lds	r25, 0x0175
     61c:	a0 91 76 01 	lds	r26, 0x0176
     620:	b0 91 77 01 	lds	r27, 0x0177
     624:	bf 6f       	ori	r27, 0xFF	; 255
     626:	08 c0       	rjmp	.+16     	; 0x638 <__vector_18+0x10e>
			}else{
				w1 = uw1;
     628:	80 91 74 01 	lds	r24, 0x0174
     62c:	90 91 75 01 	lds	r25, 0x0175
     630:	a0 91 76 01 	lds	r26, 0x0176
     634:	b0 91 77 01 	lds	r27, 0x0177
     638:	80 93 5c 01 	sts	0x015C, r24
     63c:	90 93 5d 01 	sts	0x015D, r25
     640:	a0 93 5e 01 	sts	0x015E, r26
     644:	b0 93 5f 01 	sts	0x015F, r27
			}
			w4=w1;
     648:	80 91 5c 01 	lds	r24, 0x015C
     64c:	90 91 5d 01 	lds	r25, 0x015D
     650:	a0 91 5e 01 	lds	r26, 0x015E
     654:	b0 91 5f 01 	lds	r27, 0x015F
     658:	80 93 68 01 	sts	0x0168, r24
     65c:	90 93 69 01 	sts	0x0169, r25
     660:	a0 93 6a 01 	sts	0x016A, r26
     664:	b0 93 6b 01 	sts	0x016B, r27

			w1 = w1-ch1w;
     668:	80 91 5c 01 	lds	r24, 0x015C
     66c:	90 91 5d 01 	lds	r25, 0x015D
     670:	a0 91 5e 01 	lds	r26, 0x015E
     674:	b0 91 5f 01 	lds	r27, 0x015F
     678:	20 91 6c 01 	lds	r18, 0x016C
     67c:	30 91 6d 01 	lds	r19, 0x016D
     680:	40 91 6e 01 	lds	r20, 0x016E
     684:	50 91 6f 01 	lds	r21, 0x016F
     688:	82 1b       	sub	r24, r18
     68a:	93 0b       	sbc	r25, r19
     68c:	a4 0b       	sbc	r26, r20
     68e:	b5 0b       	sbc	r27, r21
     690:	80 93 5c 01 	sts	0x015C, r24
     694:	90 93 5d 01 	sts	0x015D, r25
     698:	a0 93 5e 01 	sts	0x015E, r26
     69c:	b0 93 5f 01 	sts	0x015F, r27
			ch1w = w4;
     6a0:	80 91 68 01 	lds	r24, 0x0168
     6a4:	90 91 69 01 	lds	r25, 0x0169
     6a8:	a0 91 6a 01 	lds	r26, 0x016A
     6ac:	b0 91 6b 01 	lds	r27, 0x016B
     6b0:	80 93 6c 01 	sts	0x016C, r24
     6b4:	90 93 6d 01 	sts	0x016D, r25
     6b8:	a0 93 6e 01 	sts	0x016E, r26
     6bc:	b0 93 6f 01 	sts	0x016F, r27




			// FIR 60Hzノッチ
			w3 = w1 +ch1_60_s1;	// フィルタ後のデータ
     6c0:	20 91 5c 01 	lds	r18, 0x015C
     6c4:	30 91 5d 01 	lds	r19, 0x015D
     6c8:	40 91 5e 01 	lds	r20, 0x015E
     6cc:	50 91 5f 01 	lds	r21, 0x015F
     6d0:	80 91 3c 01 	lds	r24, 0x013C
     6d4:	90 91 3d 01 	lds	r25, 0x013D
     6d8:	a0 91 3e 01 	lds	r26, 0x013E
     6dc:	b0 91 3f 01 	lds	r27, 0x013F
     6e0:	82 0f       	add	r24, r18
     6e2:	93 1f       	adc	r25, r19
     6e4:	a4 1f       	adc	r26, r20
     6e6:	b5 1f       	adc	r27, r21
     6e8:	80 93 64 01 	sts	0x0164, r24
     6ec:	90 93 65 01 	sts	0x0165, r25
     6f0:	a0 93 66 01 	sts	0x0166, r26
     6f4:	b0 93 67 01 	sts	0x0167, r27
			w2 = w1 * 458;		//60Hz
     6f8:	60 91 5c 01 	lds	r22, 0x015C
     6fc:	70 91 5d 01 	lds	r23, 0x015D
     700:	80 91 5e 01 	lds	r24, 0x015E
     704:	90 91 5f 01 	lds	r25, 0x015F
     708:	2a ec       	ldi	r18, 0xCA	; 202
     70a:	31 e0       	ldi	r19, 0x01	; 1
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsi3>
     714:	60 93 60 01 	sts	0x0160, r22
     718:	70 93 61 01 	sts	0x0161, r23
     71c:	80 93 62 01 	sts	0x0162, r24
     720:	90 93 63 01 	sts	0x0163, r25
			ch1_60_s1 = -w1- w2/1000 + ch1_60_s2;
     724:	60 91 60 01 	lds	r22, 0x0160
     728:	70 91 61 01 	lds	r23, 0x0161
     72c:	80 91 62 01 	lds	r24, 0x0162
     730:	90 91 63 01 	lds	r25, 0x0163
     734:	a0 90 5c 01 	lds	r10, 0x015C
     738:	b0 90 5d 01 	lds	r11, 0x015D
     73c:	c0 90 5e 01 	lds	r12, 0x015E
     740:	d0 90 5f 01 	lds	r13, 0x015F
     744:	e0 90 40 01 	lds	r14, 0x0140
     748:	f0 90 41 01 	lds	r15, 0x0141
     74c:	00 91 42 01 	lds	r16, 0x0142
     750:	10 91 43 01 	lds	r17, 0x0143
     754:	28 e1       	ldi	r18, 0x18	; 24
     756:	3c ef       	ldi	r19, 0xFC	; 252
     758:	4f ef       	ldi	r20, 0xFF	; 255
     75a:	5f ef       	ldi	r21, 0xFF	; 255
     75c:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divmodsi4>
     760:	2a 19       	sub	r18, r10
     762:	3b 09       	sbc	r19, r11
     764:	4c 09       	sbc	r20, r12
     766:	5d 09       	sbc	r21, r13
     768:	e2 0e       	add	r14, r18
     76a:	f3 1e       	adc	r15, r19
     76c:	04 1f       	adc	r16, r20
     76e:	15 1f       	adc	r17, r21
     770:	e0 92 3c 01 	sts	0x013C, r14
     774:	f0 92 3d 01 	sts	0x013D, r15
     778:	00 93 3e 01 	sts	0x013E, r16
     77c:	10 93 3f 01 	sts	0x013F, r17
			ch1_60_s2 = w1;
     780:	80 91 5c 01 	lds	r24, 0x015C
     784:	90 91 5d 01 	lds	r25, 0x015D
     788:	a0 91 5e 01 	lds	r26, 0x015E
     78c:	b0 91 5f 01 	lds	r27, 0x015F
     790:	80 93 40 01 	sts	0x0140, r24
     794:	90 93 41 01 	sts	0x0141, r25
     798:	a0 93 42 01 	sts	0x0142, r26
     79c:	b0 93 43 01 	sts	0x0143, r27
				ch_B =(i+ PWM_MAX/2);
			}
*/
			
			// ch1パワー
			ch1_smpw[ch1_smpwp++]=labs(w3);		// filter on
     7a0:	60 91 86 01 	lds	r22, 0x0186
     7a4:	70 91 87 01 	lds	r23, 0x0187
     7a8:	20 91 64 01 	lds	r18, 0x0164
     7ac:	30 91 65 01 	lds	r19, 0x0165
     7b0:	40 91 66 01 	lds	r20, 0x0166
     7b4:	50 91 67 01 	lds	r21, 0x0167
     7b8:	fb 01       	movw	r30, r22
     7ba:	ee 0f       	add	r30, r30
     7bc:	ff 1f       	adc	r31, r31
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	e2 5f       	subi	r30, 0xF2	; 242
     7c4:	fd 4f       	sbci	r31, 0xFD	; 253
     7c6:	20 83       	st	Z, r18
     7c8:	31 83       	std	Z+1, r19	; 0x01
     7ca:	42 83       	std	Z+2, r20	; 0x02
     7cc:	53 83       	std	Z+3, r21	; 0x03
     7ce:	57 ff       	sbrs	r21, 7
     7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <__vector_18+0x2be>
     7d2:	88 27       	eor	r24, r24
     7d4:	99 27       	eor	r25, r25
     7d6:	dc 01       	movw	r26, r24
     7d8:	82 1b       	sub	r24, r18
     7da:	93 0b       	sbc	r25, r19
     7dc:	a4 0b       	sbc	r26, r20
     7de:	b5 0b       	sbc	r27, r21
     7e0:	80 83       	st	Z, r24
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	a2 83       	std	Z+2, r26	; 0x02
     7e6:	b3 83       	std	Z+3, r27	; 0x03
     7e8:	cb 01       	movw	r24, r22
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	90 93 87 01 	sts	0x0187, r25
     7f0:	80 93 86 01 	sts	0x0186, r24
//			ch1_smpw[ch1_smpwp++]=labs(w1);		// no filter
			if (ch1_smpwp >= SMPW_MAX) ch1_smpwp=0;
     7f4:	80 34       	cpi	r24, 0x40	; 64
     7f6:	91 05       	cpc	r25, r1
     7f8:	24 f0       	brlt	.+8      	; 0x802 <__vector_18+0x2d8>
     7fa:	10 92 87 01 	sts	0x0187, r1
     7fe:	10 92 86 01 	sts	0x0186, r1

			w1=0;
     802:	10 92 5c 01 	sts	0x015C, r1
     806:	10 92 5d 01 	sts	0x015D, r1
     80a:	10 92 5e 01 	sts	0x015E, r1
     80e:	10 92 5f 01 	sts	0x015F, r1
     812:	ee e0       	ldi	r30, 0x0E	; 14
     814:	f2 e0       	ldi	r31, 0x02	; 2
			for(i=0;i<SMPW_MAX;i++){
				w1 += ch1_smpw[i];
     816:	80 91 5c 01 	lds	r24, 0x015C
     81a:	90 91 5d 01 	lds	r25, 0x015D
     81e:	a0 91 5e 01 	lds	r26, 0x015E
     822:	b0 91 5f 01 	lds	r27, 0x015F
     826:	21 91       	ld	r18, Z+
     828:	31 91       	ld	r19, Z+
     82a:	41 91       	ld	r20, Z+
     82c:	51 91       	ld	r21, Z+
     82e:	82 0f       	add	r24, r18
     830:	93 1f       	adc	r25, r19
     832:	a4 1f       	adc	r26, r20
     834:	b5 1f       	adc	r27, r21
     836:	80 93 5c 01 	sts	0x015C, r24
     83a:	90 93 5d 01 	sts	0x015D, r25
     83e:	a0 93 5e 01 	sts	0x015E, r26
     842:	b0 93 5f 01 	sts	0x015F, r27
			ch1_smpw[ch1_smpwp++]=labs(w3);		// filter on
//			ch1_smpw[ch1_smpwp++]=labs(w1);		// no filter
			if (ch1_smpwp >= SMPW_MAX) ch1_smpwp=0;

			w1=0;
			for(i=0;i<SMPW_MAX;i++){
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	ee 30       	cpi	r30, 0x0E	; 14
     84a:	f8 07       	cpc	r31, r24
     84c:	21 f7       	brne	.-56     	; 0x816 <__vector_18+0x2ec>
				w1 += ch1_smpw[i];
			}
			ch_A = (int)(w1/SMPW_MAX/SMPW_DVK);			// 	
     84e:	60 91 5c 01 	lds	r22, 0x015C
     852:	70 91 5d 01 	lds	r23, 0x015D
     856:	80 91 5e 01 	lds	r24, 0x015E
     85a:	90 91 5f 01 	lds	r25, 0x015F
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	31 e0       	ldi	r19, 0x01	; 1
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divmodsi4>
     86a:	30 93 39 01 	sts	0x0139, r19
     86e:	20 93 38 01 	sts	0x0138, r18

#ifdef AYASE
			ch_A = ch_A/2;	
			if (ch_A >PWM_MAX_ayase) ch_A = PWM_MAX_ayase;
#else
			ch_A = ch_A/2;	// DegiBeet
     872:	80 91 38 01 	lds	r24, 0x0138
     876:	90 91 39 01 	lds	r25, 0x0139
     87a:	96 95       	lsr	r25
     87c:	87 95       	ror	r24
     87e:	90 93 39 01 	sts	0x0139, r25
     882:	80 93 38 01 	sts	0x0138, r24
			if (ch_A >PWM_MAX) ch_A = PWM_MAX;
     886:	80 91 38 01 	lds	r24, 0x0138
     88a:	90 91 39 01 	lds	r25, 0x0139
     88e:	8f 3f       	cpi	r24, 0xFF	; 255
     890:	91 05       	cpc	r25, r1
     892:	39 f0       	breq	.+14     	; 0x8a2 <__vector_18+0x378>
     894:	30 f0       	brcs	.+12     	; 0x8a2 <__vector_18+0x378>
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	90 93 39 01 	sts	0x0139, r25
     89e:	80 93 38 01 	sts	0x0138, r24

		//ch2

//			uw1 = (ULONG)SPI_Rx_buf[3]<<16 | (ULONG)SPI_Rx_buf[4]<<8 |(ULONG)SPI_Rx_buf[5];
//			if (SPI_Rx_buf[3] & 0x80){
			uw1 = (ULONG)SPI_Rx_buf[6]<<16 | (ULONG)SPI_Rx_buf[7]<<8 |(ULONG)SPI_Rx_buf[8];
     8a2:	80 91 fe 01 	lds	r24, 0x01FE
     8a6:	20 91 ff 01 	lds	r18, 0x01FF
     8aa:	e0 90 00 02 	lds	r14, 0x0200
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	a0 e0       	ldi	r26, 0x00	; 0
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	dc 01       	movw	r26, r24
     8b6:	99 27       	eor	r25, r25
     8b8:	88 27       	eor	r24, r24
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	54 2f       	mov	r21, r20
     8c2:	43 2f       	mov	r20, r19
     8c4:	32 2f       	mov	r19, r18
     8c6:	22 27       	eor	r18, r18
     8c8:	82 2b       	or	r24, r18
     8ca:	93 2b       	or	r25, r19
     8cc:	a4 2b       	or	r26, r20
     8ce:	b5 2b       	or	r27, r21
     8d0:	ff 24       	eor	r15, r15
     8d2:	00 e0       	ldi	r16, 0x00	; 0
     8d4:	10 e0       	ldi	r17, 0x00	; 0
     8d6:	8e 29       	or	r24, r14
     8d8:	9f 29       	or	r25, r15
     8da:	a0 2b       	or	r26, r16
     8dc:	b1 2b       	or	r27, r17
     8de:	80 93 74 01 	sts	0x0174, r24
     8e2:	90 93 75 01 	sts	0x0175, r25
     8e6:	a0 93 76 01 	sts	0x0176, r26
     8ea:	b0 93 77 01 	sts	0x0177, r27
			if (SPI_Rx_buf[6] & 0x80){
     8ee:	80 91 fe 01 	lds	r24, 0x01FE
     8f2:	87 ff       	sbrs	r24, 7
     8f4:	0a c0       	rjmp	.+20     	; 0x90a <__stack+0xb>
				w1 = uw1 | 0xff000000;
     8f6:	80 91 74 01 	lds	r24, 0x0174
     8fa:	90 91 75 01 	lds	r25, 0x0175
     8fe:	a0 91 76 01 	lds	r26, 0x0176
     902:	b0 91 77 01 	lds	r27, 0x0177
     906:	bf 6f       	ori	r27, 0xFF	; 255
     908:	08 c0       	rjmp	.+16     	; 0x91a <__stack+0x1b>
			}else{
				w1 = uw1;
     90a:	80 91 74 01 	lds	r24, 0x0174
     90e:	90 91 75 01 	lds	r25, 0x0175
     912:	a0 91 76 01 	lds	r26, 0x0176
     916:	b0 91 77 01 	lds	r27, 0x0177
     91a:	80 93 5c 01 	sts	0x015C, r24
     91e:	90 93 5d 01 	sts	0x015D, r25
     922:	a0 93 5e 01 	sts	0x015E, r26
     926:	b0 93 5f 01 	sts	0x015F, r27
			}

			w4=w1;
     92a:	80 91 5c 01 	lds	r24, 0x015C
     92e:	90 91 5d 01 	lds	r25, 0x015D
     932:	a0 91 5e 01 	lds	r26, 0x015E
     936:	b0 91 5f 01 	lds	r27, 0x015F
     93a:	80 93 68 01 	sts	0x0168, r24
     93e:	90 93 69 01 	sts	0x0169, r25
     942:	a0 93 6a 01 	sts	0x016A, r26
     946:	b0 93 6b 01 	sts	0x016B, r27
			w1 = w1-ch2w;
     94a:	80 91 5c 01 	lds	r24, 0x015C
     94e:	90 91 5d 01 	lds	r25, 0x015D
     952:	a0 91 5e 01 	lds	r26, 0x015E
     956:	b0 91 5f 01 	lds	r27, 0x015F
     95a:	20 91 70 01 	lds	r18, 0x0170
     95e:	30 91 71 01 	lds	r19, 0x0171
     962:	40 91 72 01 	lds	r20, 0x0172
     966:	50 91 73 01 	lds	r21, 0x0173
     96a:	82 1b       	sub	r24, r18
     96c:	93 0b       	sbc	r25, r19
     96e:	a4 0b       	sbc	r26, r20
     970:	b5 0b       	sbc	r27, r21
     972:	80 93 5c 01 	sts	0x015C, r24
     976:	90 93 5d 01 	sts	0x015D, r25
     97a:	a0 93 5e 01 	sts	0x015E, r26
     97e:	b0 93 5f 01 	sts	0x015F, r27
			ch2w = w4;
     982:	80 91 68 01 	lds	r24, 0x0168
     986:	90 91 69 01 	lds	r25, 0x0169
     98a:	a0 91 6a 01 	lds	r26, 0x016A
     98e:	b0 91 6b 01 	lds	r27, 0x016B
     992:	80 93 70 01 	sts	0x0170, r24
     996:	90 93 71 01 	sts	0x0171, r25
     99a:	a0 93 72 01 	sts	0x0172, r26
     99e:	b0 93 73 01 	sts	0x0173, r27
*/



			// FIR 60Hzノッチ
			w3 = w1 +ch2_60_s1;	// フィルタ後のデータ
     9a2:	20 91 5c 01 	lds	r18, 0x015C
     9a6:	30 91 5d 01 	lds	r19, 0x015D
     9aa:	40 91 5e 01 	lds	r20, 0x015E
     9ae:	50 91 5f 01 	lds	r21, 0x015F
     9b2:	80 91 4c 01 	lds	r24, 0x014C
     9b6:	90 91 4d 01 	lds	r25, 0x014D
     9ba:	a0 91 4e 01 	lds	r26, 0x014E
     9be:	b0 91 4f 01 	lds	r27, 0x014F
     9c2:	82 0f       	add	r24, r18
     9c4:	93 1f       	adc	r25, r19
     9c6:	a4 1f       	adc	r26, r20
     9c8:	b5 1f       	adc	r27, r21
     9ca:	80 93 64 01 	sts	0x0164, r24
     9ce:	90 93 65 01 	sts	0x0165, r25
     9d2:	a0 93 66 01 	sts	0x0166, r26
     9d6:	b0 93 67 01 	sts	0x0167, r27
			w2 = w1 * 458;		//60Hz
     9da:	60 91 5c 01 	lds	r22, 0x015C
     9de:	70 91 5d 01 	lds	r23, 0x015D
     9e2:	80 91 5e 01 	lds	r24, 0x015E
     9e6:	90 91 5f 01 	lds	r25, 0x015F
     9ea:	2a ec       	ldi	r18, 0xCA	; 202
     9ec:	31 e0       	ldi	r19, 0x01	; 1
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsi3>
     9f6:	60 93 60 01 	sts	0x0160, r22
     9fa:	70 93 61 01 	sts	0x0161, r23
     9fe:	80 93 62 01 	sts	0x0162, r24
     a02:	90 93 63 01 	sts	0x0163, r25
			ch2_60_s1 = -w1- w2/1000 + ch2_60_s2;
     a06:	60 91 60 01 	lds	r22, 0x0160
     a0a:	70 91 61 01 	lds	r23, 0x0161
     a0e:	80 91 62 01 	lds	r24, 0x0162
     a12:	90 91 63 01 	lds	r25, 0x0163
     a16:	a0 90 5c 01 	lds	r10, 0x015C
     a1a:	b0 90 5d 01 	lds	r11, 0x015D
     a1e:	c0 90 5e 01 	lds	r12, 0x015E
     a22:	d0 90 5f 01 	lds	r13, 0x015F
     a26:	e0 90 50 01 	lds	r14, 0x0150
     a2a:	f0 90 51 01 	lds	r15, 0x0151
     a2e:	00 91 52 01 	lds	r16, 0x0152
     a32:	10 91 53 01 	lds	r17, 0x0153
     a36:	28 e1       	ldi	r18, 0x18	; 24
     a38:	3c ef       	ldi	r19, 0xFC	; 252
     a3a:	4f ef       	ldi	r20, 0xFF	; 255
     a3c:	5f ef       	ldi	r21, 0xFF	; 255
     a3e:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divmodsi4>
     a42:	2a 19       	sub	r18, r10
     a44:	3b 09       	sbc	r19, r11
     a46:	4c 09       	sbc	r20, r12
     a48:	5d 09       	sbc	r21, r13
     a4a:	e2 0e       	add	r14, r18
     a4c:	f3 1e       	adc	r15, r19
     a4e:	04 1f       	adc	r16, r20
     a50:	15 1f       	adc	r17, r21
     a52:	e0 92 4c 01 	sts	0x014C, r14
     a56:	f0 92 4d 01 	sts	0x014D, r15
     a5a:	00 93 4e 01 	sts	0x014E, r16
     a5e:	10 93 4f 01 	sts	0x014F, r17
			ch2_60_s2 = w1;
     a62:	80 91 5c 01 	lds	r24, 0x015C
     a66:	90 91 5d 01 	lds	r25, 0x015D
     a6a:	a0 91 5e 01 	lds	r26, 0x015E
     a6e:	b0 91 5f 01 	lds	r27, 0x015F
     a72:	80 93 50 01 	sts	0x0150, r24
     a76:	90 93 51 01 	sts	0x0151, r25
     a7a:	a0 93 52 01 	sts	0x0152, r26
     a7e:	b0 93 53 01 	sts	0x0153, r27
			ch2_50_s1 = -w1- w2/1000 + ch2_50_s2;
			ch2_50_s2 = w1;
*/
			
			// ch2パワー
			ch2_smpw[ch2_smpwp++]=labs(w3);
     a82:	60 91 88 01 	lds	r22, 0x0188
     a86:	70 91 89 01 	lds	r23, 0x0189
     a8a:	20 91 64 01 	lds	r18, 0x0164
     a8e:	30 91 65 01 	lds	r19, 0x0165
     a92:	40 91 66 01 	lds	r20, 0x0166
     a96:	50 91 67 01 	lds	r21, 0x0167
     a9a:	fb 01       	movw	r30, r22
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	ea 5c       	subi	r30, 0xCA	; 202
     aa6:	fc 4f       	sbci	r31, 0xFC	; 252
     aa8:	20 83       	st	Z, r18
     aaa:	31 83       	std	Z+1, r19	; 0x01
     aac:	42 83       	std	Z+2, r20	; 0x02
     aae:	53 83       	std	Z+3, r21	; 0x03
     ab0:	57 ff       	sbrs	r21, 7
     ab2:	0b c0       	rjmp	.+22     	; 0xaca <__stack+0x1cb>
     ab4:	88 27       	eor	r24, r24
     ab6:	99 27       	eor	r25, r25
     ab8:	dc 01       	movw	r26, r24
     aba:	82 1b       	sub	r24, r18
     abc:	93 0b       	sbc	r25, r19
     abe:	a4 0b       	sbc	r26, r20
     ac0:	b5 0b       	sbc	r27, r21
     ac2:	80 83       	st	Z, r24
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	a2 83       	std	Z+2, r26	; 0x02
     ac8:	b3 83       	std	Z+3, r27	; 0x03
     aca:	cb 01       	movw	r24, r22
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	90 93 89 01 	sts	0x0189, r25
     ad2:	80 93 88 01 	sts	0x0188, r24
			if (ch2_smpwp >= SMPW_MAX) ch2_smpwp=0;
     ad6:	80 34       	cpi	r24, 0x40	; 64
     ad8:	91 05       	cpc	r25, r1
     ada:	24 f0       	brlt	.+8      	; 0xae4 <__stack+0x1e5>
     adc:	10 92 89 01 	sts	0x0189, r1
     ae0:	10 92 88 01 	sts	0x0188, r1


			w1=0;
     ae4:	10 92 5c 01 	sts	0x015C, r1
     ae8:	10 92 5d 01 	sts	0x015D, r1
     aec:	10 92 5e 01 	sts	0x015E, r1
     af0:	10 92 5f 01 	sts	0x015F, r1
     af4:	e6 e3       	ldi	r30, 0x36	; 54
     af6:	f3 e0       	ldi	r31, 0x03	; 3
			for(i=0;i<SMPW_MAX;i++){
				w1 += ch2_smpw[i];
     af8:	80 91 5c 01 	lds	r24, 0x015C
     afc:	90 91 5d 01 	lds	r25, 0x015D
     b00:	a0 91 5e 01 	lds	r26, 0x015E
     b04:	b0 91 5f 01 	lds	r27, 0x015F
     b08:	21 91       	ld	r18, Z+
     b0a:	31 91       	ld	r19, Z+
     b0c:	41 91       	ld	r20, Z+
     b0e:	51 91       	ld	r21, Z+
     b10:	82 0f       	add	r24, r18
     b12:	93 1f       	adc	r25, r19
     b14:	a4 1f       	adc	r26, r20
     b16:	b5 1f       	adc	r27, r21
     b18:	80 93 5c 01 	sts	0x015C, r24
     b1c:	90 93 5d 01 	sts	0x015D, r25
     b20:	a0 93 5e 01 	sts	0x015E, r26
     b24:	b0 93 5f 01 	sts	0x015F, r27
			ch2_smpw[ch2_smpwp++]=labs(w3);
			if (ch2_smpwp >= SMPW_MAX) ch2_smpwp=0;


			w1=0;
			for(i=0;i<SMPW_MAX;i++){
     b28:	94 e0       	ldi	r25, 0x04	; 4
     b2a:	e6 33       	cpi	r30, 0x36	; 54
     b2c:	f9 07       	cpc	r31, r25
     b2e:	21 f7       	brne	.-56     	; 0xaf8 <__stack+0x1f9>
				w1 += ch2_smpw[i];
			}
			ch_B = (int)(w1/SMPW_MAX/SMPW_DVK);			//
     b30:	60 91 5c 01 	lds	r22, 0x015C
     b34:	70 91 5d 01 	lds	r23, 0x015D
     b38:	80 91 5e 01 	lds	r24, 0x015E
     b3c:	90 91 5f 01 	lds	r25, 0x015F
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	31 e0       	ldi	r19, 0x01	; 1
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divmodsi4>
     b4c:	30 93 3b 01 	sts	0x013B, r19
     b50:	20 93 3a 01 	sts	0x013A, r18
			 
#ifdef AYASE
			ch_B = ch_B/2;	
			if (ch_B >PWM_MAX_ayase) ch_B = PWM_MAX_ayase;
#else
			ch_B = ch_B/2;	// DegiBeet
     b54:	80 91 3a 01 	lds	r24, 0x013A
     b58:	90 91 3b 01 	lds	r25, 0x013B
     b5c:	96 95       	lsr	r25
     b5e:	87 95       	ror	r24
     b60:	90 93 3b 01 	sts	0x013B, r25
     b64:	80 93 3a 01 	sts	0x013A, r24
			if (ch_B >PWM_MAX) ch_B = PWM_MAX;
     b68:	80 91 3a 01 	lds	r24, 0x013A
     b6c:	90 91 3b 01 	lds	r25, 0x013B
     b70:	8f 3f       	cpi	r24, 0xFF	; 255
     b72:	91 05       	cpc	r25, r1
     b74:	39 f0       	breq	.+14     	; 0xb84 <__stack+0x285>
     b76:	30 f0       	brcs	.+12     	; 0xb84 <__stack+0x285>
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	90 93 3b 01 	sts	0x013B, r25
     b80:	80 93 3a 01 	sts	0x013A, r24

			//ch_B = SPI_Rx_buf[6]<<5 | SPI_Rx_buf[7]>>3;

//			ch_A = SPI_Rx_buf[4]<<8 | SPI_Rx_buf[5];
//			ch_B = SPI_Rx_buf[7]<<8 | SPI_Rx_buf[8];
			val_flag  = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	80 93 32 01 	sts	0x0132, r24


			// 送信処理タイミングカウンタ
			//2msecごとに処理されるので*10で20msecで一巡
			tx_cnt++;
     b8a:	80 91 31 01 	lds	r24, 0x0131
     b8e:	8f 5f       	subi	r24, 0xFF	; 255
     b90:	80 93 31 01 	sts	0x0131, r24
			if (tx_cnt==10)tx_cnt=0;
     b94:	80 91 31 01 	lds	r24, 0x0131
     b98:	8a 30       	cpi	r24, 0x0A	; 10
     b9a:	11 f4       	brne	.+4      	; 0xba0 <__stack+0x2a1>
     b9c:	10 92 31 01 	sts	0x0131, r1

			if(tx_cnt==1){
     ba0:	80 91 31 01 	lds	r24, 0x0131
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	a9 f5       	brne	.+106    	; 0xc12 <__stack+0x313>
				// bluetooth TX
				sprintf(sss,"S%03d,%03d",ch_A,ch_B);
     ba8:	20 91 38 01 	lds	r18, 0x0138
     bac:	30 91 39 01 	lds	r19, 0x0139
     bb0:	40 91 3a 01 	lds	r20, 0x013A
     bb4:	50 91 3b 01 	lds	r21, 0x013B
     bb8:	ad b7       	in	r26, 0x3d	; 61
     bba:	be b7       	in	r27, 0x3e	; 62
     bbc:	18 97       	sbiw	r26, 0x08	; 8
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	be bf       	out	0x3e, r27	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	ad bf       	out	0x3d, r26	; 61
     bc8:	ed b7       	in	r30, 0x3d	; 61
     bca:	fe b7       	in	r31, 0x3e	; 62
     bcc:	31 96       	adiw	r30, 0x01	; 1
     bce:	08 eb       	ldi	r16, 0xB8	; 184
     bd0:	11 e0       	ldi	r17, 0x01	; 1
     bd2:	12 96       	adiw	r26, 0x02	; 2
     bd4:	1c 93       	st	X, r17
     bd6:	0e 93       	st	-X, r16
     bd8:	11 97       	sbiw	r26, 0x01	; 1
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	93 83       	std	Z+3, r25	; 0x03
     be0:	82 83       	std	Z+2, r24	; 0x02
     be2:	35 83       	std	Z+5, r19	; 0x05
     be4:	24 83       	std	Z+4, r18	; 0x04
     be6:	57 83       	std	Z+7, r21	; 0x07
     be8:	46 83       	std	Z+6, r20	; 0x06
     bea:	0e 94 77 08 	call	0x10ee	; 0x10ee <sprintf>
     bee:	e8 01       	movw	r28, r16
     bf0:	8d b7       	in	r24, 0x3d	; 61
     bf2:	9e b7       	in	r25, 0x3e	; 62
     bf4:	08 96       	adiw	r24, 0x08	; 8
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	9e bf       	out	0x3e, r25	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	8d bf       	out	0x3d, r24	; 61
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <__stack+0x307>
				i=0;
				while(sss[i] != 0){
					softserial(sss[i++]);
     c02:	0e 94 83 07 	call	0xf06	; 0xf06 <softserial>

			if(tx_cnt==1){
				// bluetooth TX
				sprintf(sss,"S%03d,%03d",ch_A,ch_B);
				i=0;
				while(sss[i] != 0){
     c06:	89 91       	ld	r24, Y+
     c08:	88 23       	and	r24, r24
     c0a:	d9 f7       	brne	.-10     	; 0xc02 <__stack+0x303>
					softserial(sss[i++]);
				}
				//for(i=0;i<7;i++){
				//	softserial(sss[i]);
				//}
				softserial(0xd);
     c0c:	8d e0       	ldi	r24, 0x0D	; 13
     c0e:	0e 94 83 07 	call	0xf06	; 0xf06 <softserial>

			}

			if(tx_cnt==3){
     c12:	80 91 31 01 	lds	r24, 0x0131
     c16:	83 30       	cpi	r24, 0x03	; 3
     c18:	09 f0       	breq	.+2      	; 0xc1c <__stack+0x31d>
     c1a:	7a c0       	rjmp	.+244    	; 0xd10 <__stack+0x411>
				// Disp シリアルLED
				// 信号強度で緑のLEDの明るさを制御
				// 電極はずれ時赤3灯弱く
				// 信号強度で個数を制御 >200:5   >150:3  >100:2  <100：5灯弱くレベル50  
				if ((stat1 & (1<<0)) + (stat2 & 1<<7)){
     c1c:	20 91 33 01 	lds	r18, 0x0133
     c20:	80 91 34 01 	lds	r24, 0x0134
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	80 78       	andi	r24, 0x80	; 128
     c28:	90 70       	andi	r25, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	21 70       	andi	r18, 0x01	; 1
     c2e:	30 70       	andi	r19, 0x00	; 0
     c30:	82 0f       	add	r24, r18
     c32:	93 1f       	adc	r25, r19
     c34:	89 2b       	or	r24, r25
     c36:	61 f0       	breq	.+24     	; 0xc50 <__stack+0x351>
     c38:	e6 e3       	ldi	r30, 0x36	; 54
     c3a:	f4 e0       	ldi	r31, 0x04	; 4
					// 電極外れ
					for (i=0;i<N_SLEDS;i++){
						sleds[i][SLED_GREEN]=0;
						sleds[i][SLED_RED]=25;
     c3c:	89 e1       	ldi	r24, 0x19	; 25
				// 電極はずれ時赤3灯弱く
				// 信号強度で個数を制御 >200:5   >150:3  >100:2  <100：5灯弱くレベル50  
				if ((stat1 & (1<<0)) + (stat2 & 1<<7)){
					// 電極外れ
					for (i=0;i<N_SLEDS;i++){
						sleds[i][SLED_GREEN]=0;
     c3e:	10 82       	st	Z, r1
						sleds[i][SLED_RED]=25;
     c40:	81 83       	std	Z+1, r24	; 0x01
						sleds[i][SLED_BLUE]=0;
     c42:	12 82       	std	Z+2, r1	; 0x02
     c44:	33 96       	adiw	r30, 0x03	; 3
				// 信号強度で緑のLEDの明るさを制御
				// 電極はずれ時赤3灯弱く
				// 信号強度で個数を制御 >200:5   >150:3  >100:2  <100：5灯弱くレベル50  
				if ((stat1 & (1<<0)) + (stat2 & 1<<7)){
					// 電極外れ
					for (i=0;i<N_SLEDS;i++){
     c46:	94 e0       	ldi	r25, 0x04	; 4
     c48:	e5 34       	cpi	r30, 0x45	; 69
     c4a:	f9 07       	cpc	r31, r25
     c4c:	c1 f7       	brne	.-16     	; 0xc3e <__stack+0x33f>
     c4e:	5b c0       	rjmp	.+182    	; 0xd06 <__stack+0x407>
     c50:	e7 e3       	ldi	r30, 0x37	; 55
     c52:	f4 e0       	ldi	r31, 0x04	; 4
						sleds[i][SLED_RED]=25;
						sleds[i][SLED_BLUE]=0;
					}
				}else{
					for (i=0;i<N_SLEDS;i++){
						sleds[i][SLED_RED]=0;
     c54:	10 82       	st	Z, r1
						sleds[i][SLED_BLUE]=0;
     c56:	11 82       	std	Z+1, r1	; 0x01
     c58:	33 96       	adiw	r30, 0x03	; 3
						sleds[i][SLED_GREEN]=0;
						sleds[i][SLED_RED]=25;
						sleds[i][SLED_BLUE]=0;
					}
				}else{
					for (i=0;i<N_SLEDS;i++){
     c5a:	a4 e0       	ldi	r26, 0x04	; 4
     c5c:	e6 34       	cpi	r30, 0x46	; 70
     c5e:	fa 07       	cpc	r31, r26
     c60:	c9 f7       	brne	.-14     	; 0xc54 <__stack+0x355>
						sleds[i][SLED_RED]=0;
						sleds[i][SLED_BLUE]=0;
					}
					if(ch_A<=50){
     c62:	80 91 38 01 	lds	r24, 0x0138
     c66:	90 91 39 01 	lds	r25, 0x0139
     c6a:	c3 97       	sbiw	r24, 0x33	; 51
     c6c:	38 f0       	brcs	.+14     	; 0xc7c <__stack+0x37d>
						// 最低レベル
						for (i=0;i<N_SLEDS;i++){
							sleds[i][SLED_GREEN]=(BYTE)ch_A;
						}
					}else if (ch_A>200){
     c6e:	80 91 38 01 	lds	r24, 0x0138
     c72:	90 91 39 01 	lds	r25, 0x0139
     c76:	89 3c       	cpi	r24, 0xC9	; 201
     c78:	91 05       	cpc	r25, r1
     c7a:	f8 f0       	brcs	.+62     	; 0xcba <__stack+0x3bb>
						for (i=0;i<N_SLEDS;i++){
							sleds[i][SLED_GREEN]=(BYTE)ch_A;
     c7c:	80 91 38 01 	lds	r24, 0x0138
     c80:	90 91 39 01 	lds	r25, 0x0139
     c84:	80 93 36 04 	sts	0x0436, r24
     c88:	80 91 38 01 	lds	r24, 0x0138
     c8c:	90 91 39 01 	lds	r25, 0x0139
     c90:	80 93 39 04 	sts	0x0439, r24
     c94:	80 91 38 01 	lds	r24, 0x0138
     c98:	90 91 39 01 	lds	r25, 0x0139
     c9c:	80 93 3c 04 	sts	0x043C, r24
     ca0:	80 91 38 01 	lds	r24, 0x0138
     ca4:	90 91 39 01 	lds	r25, 0x0139
     ca8:	80 93 3f 04 	sts	0x043F, r24
     cac:	80 91 38 01 	lds	r24, 0x0138
     cb0:	90 91 39 01 	lds	r25, 0x0139
     cb4:	80 93 42 04 	sts	0x0442, r24
     cb8:	26 c0       	rjmp	.+76     	; 0xd06 <__stack+0x407>
						}
					}else if (ch_A>150){
     cba:	80 91 38 01 	lds	r24, 0x0138
     cbe:	90 91 39 01 	lds	r25, 0x0139
     cc2:	87 39       	cpi	r24, 0x97	; 151
     cc4:	91 05       	cpc	r25, r1
     cc6:	98 f0       	brcs	.+38     	; 0xcee <__stack+0x3ef>
						sleds[1][SLED_GREEN]=(BYTE)ch_A;
     cc8:	80 91 38 01 	lds	r24, 0x0138
     ccc:	90 91 39 01 	lds	r25, 0x0139
     cd0:	80 93 39 04 	sts	0x0439, r24
						sleds[2][SLED_GREEN]=(BYTE)ch_A;
     cd4:	80 91 38 01 	lds	r24, 0x0138
     cd8:	90 91 39 01 	lds	r25, 0x0139
     cdc:	80 93 3c 04 	sts	0x043C, r24
						sleds[3][SLED_GREEN]=(BYTE)ch_A;
     ce0:	80 91 38 01 	lds	r24, 0x0138
     ce4:	90 91 39 01 	lds	r25, 0x0139
     ce8:	80 93 3f 04 	sts	0x043F, r24
     cec:	0c c0       	rjmp	.+24     	; 0xd06 <__stack+0x407>
					}else{
						sleds[1][SLED_GREEN]=(BYTE)ch_A;
     cee:	80 91 38 01 	lds	r24, 0x0138
     cf2:	90 91 39 01 	lds	r25, 0x0139
     cf6:	80 93 39 04 	sts	0x0439, r24
						sleds[2][SLED_GREEN]=(BYTE)ch_A;
     cfa:	80 91 38 01 	lds	r24, 0x0138
     cfe:	90 91 39 01 	lds	r25, 0x0139
     d02:	80 93 3c 04 	sts	0x043C, r24
					}
				}
				disp_sled();
     d06:	0e 94 a0 07 	call	0xf40	; 0xf40 <disp_sled>
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <__stack+0x411>

			}

      	}else{
      		// つぎの受信のため送信
			UDR0 = 0; 					// To get Next byte.
     d0c:	10 92 c6 00 	sts	0x00C6, r1
      	}
//		LED_BLU_OFF;
	//	reti();
 }
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	bf 91       	pop	r27
     d1a:	af 91       	pop	r26
     d1c:	9f 91       	pop	r25
     d1e:	8f 91       	pop	r24
     d20:	7f 91       	pop	r23
     d22:	6f 91       	pop	r22
     d24:	5f 91       	pop	r21
     d26:	4f 91       	pop	r20
     d28:	3f 91       	pop	r19
     d2a:	2f 91       	pop	r18
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	bf 90       	pop	r11
     d3a:	af 90       	pop	r10
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti

00000d46 <__vector_7>:



// 1ms
ISR(TIMER2_COMPA_vect)
{
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	8f 93       	push	r24
     d52:	9f 93       	push	r25
     d54:	af 93       	push	r26
     d56:	bf 93       	push	r27
	timer++;
     d58:	80 91 8a 01 	lds	r24, 0x018A
     d5c:	90 91 8b 01 	lds	r25, 0x018B
     d60:	a0 91 8c 01 	lds	r26, 0x018C
     d64:	b0 91 8d 01 	lds	r27, 0x018D
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	a1 1d       	adc	r26, r1
     d6c:	b1 1d       	adc	r27, r1
     d6e:	80 93 8a 01 	sts	0x018A, r24
     d72:	90 93 8b 01 	sts	0x018B, r25
     d76:	a0 93 8c 01 	sts	0x018C, r26
     d7a:	b0 93 8d 01 	sts	0x018D, r27
}
     d7e:	bf 91       	pop	r27
     d80:	af 91       	pop	r26
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <delay_ms>:
     d90:	20 ed       	ldi	r18, 0xD0	; 208
     d92:	37 e0       	ldi	r19, 0x07	; 7
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <delay_ms+0xe>
     d96:	f9 01       	movw	r30, r18
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <delay_ms+0x8>
     d9c:	01 97       	sbiw	r24, 0x01	; 1


//------------------------------------
void delay_ms(WORD t)
{
	while(t--){
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	d1 f7       	brne	.-12     	; 0xd96 <delay_ms+0x6>
		_delay_ms(1);
	}

}
     da2:	08 95       	ret

00000da4 <pwm_A>:

//---------------------------------------------------------
// PWM chA設定
void pwm_A(WORD d)
{
     da4:	9c 01       	movw	r18, r24
	if (d==0){
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	59 f4       	brne	.+22     	; 0xdc0 <pwm_A+0x1c>
		// 出力０
		PWMA_LOW;
     daa:	80 91 80 00 	lds	r24, 0x0080
     dae:	8f 77       	andi	r24, 0x7F	; 127
     db0:	80 93 80 00 	sts	0x0080, r24
     db4:	29 98       	cbi	0x05, 1	; 5
     db6:	10 92 89 00 	sts	0x0089, r1
     dba:	10 92 88 00 	sts	0x0088, r1
     dbe:	08 95       	ret
	}else if(d>=PWM_MAX){
     dc0:	8f 3f       	cpi	r24, 0xFF	; 255
     dc2:	91 05       	cpc	r25, r1
     dc4:	68 f0       	brcs	.+26     	; 0xde0 <pwm_A+0x3c>
		// 最大
		PWMA_HI;
     dc6:	80 91 80 00 	lds	r24, 0x0080
     dca:	8f 77       	andi	r24, 0x7F	; 127
     dcc:	80 93 80 00 	sts	0x0080, r24
     dd0:	29 9a       	sbi	0x05, 1	; 5
     dd2:	8f ef       	ldi	r24, 0xFF	; 255
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	90 93 89 00 	sts	0x0089, r25
     dda:	80 93 88 00 	sts	0x0088, r24
     dde:	08 95       	ret
	}else{
		// PWM
		PWMA_PWM;
     de0:	80 91 80 00 	lds	r24, 0x0080
     de4:	80 68       	ori	r24, 0x80	; 128
     de6:	80 93 80 00 	sts	0x0080, r24
		PWMA = d;
     dea:	30 93 89 00 	sts	0x0089, r19
     dee:	20 93 88 00 	sts	0x0088, r18
     df2:	08 95       	ret

00000df4 <pwm_B>:
}

//---------------------------------------------------------
// PWM chB設定
void pwm_B(WORD d)
{
     df4:	9c 01       	movw	r18, r24
	if (d==0){
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	59 f4       	brne	.+22     	; 0xe10 <pwm_B+0x1c>
		// 出力０
		PWMB_LOW;
     dfa:	80 91 80 00 	lds	r24, 0x0080
     dfe:	8f 7d       	andi	r24, 0xDF	; 223
     e00:	80 93 80 00 	sts	0x0080, r24
     e04:	2a 98       	cbi	0x05, 2	; 5
     e06:	10 92 8b 00 	sts	0x008B, r1
     e0a:	10 92 8a 00 	sts	0x008A, r1
     e0e:	08 95       	ret
	}else if(d>=PWM_MAX){
     e10:	8f 3f       	cpi	r24, 0xFF	; 255
     e12:	91 05       	cpc	r25, r1
     e14:	68 f0       	brcs	.+26     	; 0xe30 <pwm_B+0x3c>
		// 最大
		PWMB_HI;
     e16:	80 91 80 00 	lds	r24, 0x0080
     e1a:	8f 7d       	andi	r24, 0xDF	; 223
     e1c:	80 93 80 00 	sts	0x0080, r24
     e20:	2a 9a       	sbi	0x05, 2	; 5
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	90 93 8b 00 	sts	0x008B, r25
     e2a:	80 93 8a 00 	sts	0x008A, r24
     e2e:	08 95       	ret
	}else{
		// PWM
		PWMB_PWM;
     e30:	80 91 80 00 	lds	r24, 0x0080
     e34:	80 62       	ori	r24, 0x20	; 32
     e36:	80 93 80 00 	sts	0x0080, r24
		PWMB = d;
     e3a:	30 93 8b 00 	sts	0x008B, r19
     e3e:	20 93 8a 00 	sts	0x008A, r18
     e42:	08 95       	ret

00000e44 <load_prm>:

		// エラーの標準値
	//	initsetting();	// 出荷時設定値


}
     e44:	08 95       	ret

00000e46 <main>:

int main(void)
{


	timer = 0;
     e46:	10 92 8a 01 	sts	0x018A, r1
     e4a:	10 92 8b 01 	sts	0x018B, r1
     e4e:	10 92 8c 01 	sts	0x018C, r1
     e52:	10 92 8d 01 	sts	0x018D, r1
//	int i=0,j=0;

	LED_INI;
     e56:	3a 9a       	sbi	0x07, 2	; 7
     e58:	42 98       	cbi	0x08, 2	; 8
     e5a:	8a b1       	in	r24, 0x0a	; 10
     e5c:	80 66       	ori	r24, 0x60	; 96
     e5e:	8a b9       	out	0x0a, r24	; 10
	LED_PWM_INI;
     e60:	83 ea       	ldi	r24, 0xA3	; 163
     e62:	84 bd       	out	0x24, r24	; 36
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	85 bd       	out	0x25, r24	; 37
     e68:	17 bc       	out	0x27, r1	; 39
     e6a:	18 bc       	out	0x28, r1	; 40
	
	softserial_ini();
     e6c:	0e 94 80 07 	call	0xf00	; 0xf00 <softserial_ini>
	

	// test 点灯
	LED_LEFT_ON;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	87 bd       	out	0x27, r24	; 39
	LED_RIGHT_ON;
     e74:	88 bd       	out	0x28, r24	; 40
	LED_RED_ON;
     e76:	42 9a       	sbi	0x08, 2	; 8
     e78:	80 e6       	ldi	r24, 0x60	; 96
     e7a:	9a ee       	ldi	r25, 0xEA	; 234
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <main+0x36>
//	LED_LEFT_OFF;
//	LED_RIGHT_PWM = 128;
//	PORTD |= (1<<LED_LEFT | 1<<LED_RIGHT);

	_delay_ms(30);
	LED_RED_OFF;
     e80:	42 98       	cbi	0x08, 2	; 8
	

	PWM_INI;
     e82:	82 ea       	ldi	r24, 0xA2	; 162
     e84:	80 93 80 00 	sts	0x0080, r24
     e88:	89 e1       	ldi	r24, 0x19	; 25
     e8a:	80 93 81 00 	sts	0x0081, r24
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	90 93 87 00 	sts	0x0087, r25
     e96:	80 93 86 00 	sts	0x0086, r24
     e9a:	10 92 85 00 	sts	0x0085, r1
     e9e:	10 92 84 00 	sts	0x0084, r1
     ea2:	84 b1       	in	r24, 0x04	; 4
     ea4:	86 60       	ori	r24, 0x06	; 6
     ea6:	84 b9       	out	0x04, r24	; 4
	
	// タイマー 1ms計測用 
	TMR1MS_INI;
     ea8:	8d e7       	ldi	r24, 0x7D	; 125
     eaa:	80 93 b3 00 	sts	0x00B3, r24
     eae:	83 e0       	ldi	r24, 0x03	; 3
     eb0:	80 93 b0 00 	sts	0x00B0, r24
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	80 93 b1 00 	sts	0x00B1, r24
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	80 93 70 00 	sts	0x0070, r24

	// EEPROMからパラメータを読み込む
	load_prm();

	pwm_A(500);
     ec0:	84 ef       	ldi	r24, 0xF4	; 244
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 d2 06 	call	0xda4	; 0xda4 <pwm_A>
	pwm_B(700);
     ec8:	8c eb       	ldi	r24, 0xBC	; 188
     eca:	92 e0       	ldi	r25, 0x02	; 2
     ecc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <pwm_B>

 sled_ini();
     ed0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <sled_ini>
		softserial('B');
//	_delay_ms(10);
	}
*/

	ADS1x9x_PowerOn_Init();		// この中にすべての処理があります。
     ed4:	0e 94 24 02 	call	0x448	; 0x448 <ADS1x9x_PowerOn_Init>
     ed8:	ff cf       	rjmp	.-2      	; 0xed8 <main+0x92>

00000eda <save_prm>:
					^11
					^22 
				);

	// eeprom書込
	eeprom_busy_wait();
     eda:	f9 99       	sbic	0x1f, 1	; 31
     edc:	fe cf       	rjmp	.-4      	; 0xeda <save_prm>
	eeprom_write_word (&e_MODE,11	);	
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	6b e0       	ldi	r22, 0x0B	; 11
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__eewr_word_m328p>
	eeprom_busy_wait();
     eea:	f9 99       	sbic	0x1f, 1	; 31
     eec:	fe cf       	rjmp	.-4      	; 0xeea <save_prm+0x10>
	eeprom_write_word (&e_DIR_MODE,22	);	
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	66 e1       	ldi	r22, 0x16	; 22
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__eewr_word_m328p>
	eeprom_busy_wait();
     efa:	f9 99       	sbic	0x1f, 1	; 31
     efc:	fe cf       	rjmp	.-4      	; 0xefa <save_prm+0x20>


}
     efe:	08 95       	ret

00000f00 <softserial_ini>:
#define BIT_HI  SF_PORT |=  (1<<SF_BIT)		// bit on
#define BIT_LOW SF_PORT &= ~(1<<SF_BIT)		// bit off

void softserial_ini(void)
{
		SF_PORT |=(1<< SF_BIT);
     f00:	5b 9a       	sbi	0x0b, 3	; 11
		SF_DDR  |=(1<< SF_BIT);
     f02:	53 9a       	sbi	0x0a, 3	; 10
}
     f04:	08 95       	ret

00000f06 <softserial>:
void softserial(unsigned char d)
{
	char i,a;
	int c;

	c = d;
     f06:	90 e0       	ldi	r25, 0x00	; 0
	c |= 0x100;		// stop bit
     f08:	91 60       	ori	r25, 0x01	; 1
	c = c<<1;
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f10:	42 e1       	ldi	r20, 0x12	; 18

	for (i=0;i<10;i++){
		if (c & 1){
     f12:	80 ff       	sbrs	r24, 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <softserial+0x14>
			BIT_HI;
     f16:	5b 9a       	sbi	0x0b, 3	; 11
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <softserial+0x16>
		}else{
			BIT_LOW;
     f1a:	5b 98       	cbi	0x0b, 3	; 11
     f1c:	24 2f       	mov	r18, r20
     f1e:	2a 95       	dec	r18
     f20:	f1 f7       	brne	.-4      	; 0xf1e <softserial+0x18>
		}
		c = c >>1;
		_delay_us(7);
		a = SF_PORT;
     f22:	2b b1       	in	r18, 0x0b	; 11
		a = SF_PORT;
     f24:	2b b1       	in	r18, 0x0b	; 11
		a = SF_PORT;
     f26:	2b b1       	in	r18, 0x0b	; 11
		a = SF_PORT;
     f28:	2b b1       	in	r18, 0x0b	; 11
		a = SF_PORT;
     f2a:	2b b1       	in	r18, 0x0b	; 11

	c = d;
	c |= 0x100;		// stop bit
	c = c<<1;

	for (i=0;i<10;i++){
     f2c:	3f 5f       	subi	r19, 0xFF	; 255
     f2e:	3a 30       	cpi	r19, 0x0A	; 10
     f30:	19 f0       	breq	.+6      	; 0xf38 <softserial+0x32>
		if (c & 1){
			BIT_HI;
		}else{
			BIT_LOW;
		}
		c = c >>1;
     f32:	95 95       	asr	r25
     f34:	87 95       	ror	r24
     f36:	ed cf       	rjmp	.-38     	; 0xf12 <softserial+0xc>
     f38:	08 95       	ret

00000f3a <sled_ini>:


void sled_ini(void)
{
//	SLED_PORT |= (1<<SLED_BIT);
	SLED_PORT &= ~(1<<SLED_BIT);
     f3a:	45 98       	cbi	0x08, 5	; 8
	SLED_DDR  |= (1<<SLED_BIT);
     f3c:	3d 9a       	sbi	0x07, 5	; 7
}
     f3e:	08 95       	ret

00000f40 <disp_sled>:

void disp_sled(void)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	27 97       	sbiw	r28, 0x07	; 7
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
  volatile uint16_t
    i   = N_SLEDS*3; // Loop counter
     f54:	8f e0       	ldi	r24, 0x0F	; 15
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9f 83       	std	Y+7, r25	; 0x07
     f5a:	8e 83       	std	Y+6, r24	; 0x06
  volatile uint8_t
   *ptr = &sleds[0][0], // Pointer to next byte
    b   = *ptr++,   // Current byte value
     f5c:	80 91 36 04 	lds	r24, 0x0436
     f60:	89 83       	std	Y+1, r24	; 0x01
    hi,             // PORT w/output bit set high
    lo;             // PORT w/output bit set low
   volatile uint8_t n1, n2 = 0;  // First, next bits out
     f62:	1d 82       	std	Y+5, r1	; 0x05


	hi = SLED_PORT;
     f64:	88 b1       	in	r24, 0x08	; 8
     f66:	8a 83       	std	Y+2, r24	; 0x02
	lo = hi & ~(1<<SLED_BIT);
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	8f 7d       	andi	r24, 0xDF	; 223
     f6c:	8b 83       	std	Y+3, r24	; 0x03
	hi = hi |  (1<<SLED_BIT);
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	80 62       	ori	r24, 0x20	; 32
     f72:	8a 83       	std	Y+2, r24	; 0x02

// 0.4us 0.85us 12.5us
// ----------
// ~~~|==|___

      n1 = lo;
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	8c 83       	std	Y+4, r24	; 0x04
      if(b & 0x80) n1 = hi;
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	87 ff       	sbrs	r24, 7
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <disp_sled+0x42>
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	8c 83       	std	Y+4, r24	; 0x04
//	  n1=hi;//@@
     asm volatile(
     f82:	6a 81       	ldd	r22, Y+2	; 0x02
     f84:	5b 81       	ldd	r21, Y+3	; 0x03
     f86:	29 81       	ldd	r18, Y+1	; 0x01
     f88:	3c 81       	ldd	r19, Y+4	; 0x04
     f8a:	4d 81       	ldd	r20, Y+5	; 0x05
     f8c:	8e 81       	ldd	r24, Y+6	; 0x06
     f8e:	9f 81       	ldd	r25, Y+7	; 0x07
     f90:	e7 e3       	ldi	r30, 0x37	; 55
     f92:	f4 e0       	ldi	r31, 0x04	; 4

00000f94 <headD>:
     f94:	68 b9       	out	0x08, r22	; 8
     f96:	45 2f       	mov	r20, r21
     f98:	38 b9       	out	0x08, r19	; 8
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <headD+0x8>
     f9c:	26 fd       	sbrc	r18, 6
     f9e:	46 2f       	mov	r20, r22
     fa0:	58 b9       	out	0x08, r21	; 8
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <headD+0x10>
     fa4:	68 b9       	out	0x08, r22	; 8
     fa6:	35 2f       	mov	r19, r21
     fa8:	48 b9       	out	0x08, r20	; 8
     faa:	00 c0       	rjmp	.+0      	; 0xfac <headD+0x18>
     fac:	25 fd       	sbrc	r18, 5
     fae:	36 2f       	mov	r19, r22
     fb0:	58 b9       	out	0x08, r21	; 8
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <headD+0x20>
     fb4:	68 b9       	out	0x08, r22	; 8
     fb6:	45 2f       	mov	r20, r21
     fb8:	38 b9       	out	0x08, r19	; 8
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <headD+0x28>
     fbc:	24 fd       	sbrc	r18, 4
     fbe:	46 2f       	mov	r20, r22
     fc0:	58 b9       	out	0x08, r21	; 8
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <headD+0x30>
     fc4:	68 b9       	out	0x08, r22	; 8
     fc6:	35 2f       	mov	r19, r21
     fc8:	48 b9       	out	0x08, r20	; 8
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <headD+0x38>
     fcc:	23 fd       	sbrc	r18, 3
     fce:	36 2f       	mov	r19, r22
     fd0:	58 b9       	out	0x08, r21	; 8
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <headD+0x40>
     fd4:	68 b9       	out	0x08, r22	; 8
     fd6:	45 2f       	mov	r20, r21
     fd8:	38 b9       	out	0x08, r19	; 8
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <headD+0x48>
     fdc:	22 fd       	sbrc	r18, 2
     fde:	46 2f       	mov	r20, r22
     fe0:	58 b9       	out	0x08, r21	; 8
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <headD+0x50>
     fe4:	68 b9       	out	0x08, r22	; 8
     fe6:	35 2f       	mov	r19, r21
     fe8:	48 b9       	out	0x08, r20	; 8
     fea:	00 c0       	rjmp	.+0      	; 0xfec <headD+0x58>
     fec:	21 fd       	sbrc	r18, 1
     fee:	36 2f       	mov	r19, r22
     ff0:	58 b9       	out	0x08, r21	; 8
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <headD+0x60>
     ff4:	68 b9       	out	0x08, r22	; 8
     ff6:	45 2f       	mov	r20, r21
     ff8:	38 b9       	out	0x08, r19	; 8
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <headD+0x68>
     ffc:	20 fd       	sbrc	r18, 0
     ffe:	46 2f       	mov	r20, r22
    1000:	58 b9       	out	0x08, r21	; 8
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	68 b9       	out	0x08, r22	; 8
    1006:	35 2f       	mov	r19, r21
    1008:	48 b9       	out	0x08, r20	; 8
    100a:	21 91       	ld	r18, Z+
    100c:	27 fd       	sbrc	r18, 7
    100e:	36 2f       	mov	r19, r22
    1010:	58 b9       	out	0x08, r21	; 8
    1012:	01 f6       	brne	.-128    	; 0xf94 <headD>
    1014:	29 83       	std	Y+1, r18	; 0x01
    1016:	3c 83       	std	Y+4, r19	; 0x04
    1018:	4d 83       	std	Y+5, r20	; 0x05
    101a:	9f 83       	std	Y+7, r25	; 0x07
    101c:	8e 83       	std	Y+6, r24	; 0x06
    101e:	85 e8       	ldi	r24, 0x85	; 133
    1020:	8a 95       	dec	r24
    1022:	f1 f7       	brne	.-4      	; 0x1020 <headD+0x8c>
		_delay_us(50);

//		SLED_PORT = hi;


}
    1024:	27 96       	adiw	r28, 0x07	; 7
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <__mulsi3>:
    1036:	62 9f       	mul	r22, r18
    1038:	d0 01       	movw	r26, r0
    103a:	73 9f       	mul	r23, r19
    103c:	f0 01       	movw	r30, r0
    103e:	82 9f       	mul	r24, r18
    1040:	e0 0d       	add	r30, r0
    1042:	f1 1d       	adc	r31, r1
    1044:	64 9f       	mul	r22, r20
    1046:	e0 0d       	add	r30, r0
    1048:	f1 1d       	adc	r31, r1
    104a:	92 9f       	mul	r25, r18
    104c:	f0 0d       	add	r31, r0
    104e:	83 9f       	mul	r24, r19
    1050:	f0 0d       	add	r31, r0
    1052:	74 9f       	mul	r23, r20
    1054:	f0 0d       	add	r31, r0
    1056:	65 9f       	mul	r22, r21
    1058:	f0 0d       	add	r31, r0
    105a:	99 27       	eor	r25, r25
    105c:	72 9f       	mul	r23, r18
    105e:	b0 0d       	add	r27, r0
    1060:	e1 1d       	adc	r30, r1
    1062:	f9 1f       	adc	r31, r25
    1064:	63 9f       	mul	r22, r19
    1066:	b0 0d       	add	r27, r0
    1068:	e1 1d       	adc	r30, r1
    106a:	f9 1f       	adc	r31, r25
    106c:	bd 01       	movw	r22, r26
    106e:	cf 01       	movw	r24, r30
    1070:	11 24       	eor	r1, r1
    1072:	08 95       	ret

00001074 <__divmodsi4>:
    1074:	97 fb       	bst	r25, 7
    1076:	09 2e       	mov	r0, r25
    1078:	05 26       	eor	r0, r21
    107a:	0e d0       	rcall	.+28     	; 0x1098 <__divmodsi4_neg1>
    107c:	57 fd       	sbrc	r21, 7
    107e:	04 d0       	rcall	.+8      	; 0x1088 <__divmodsi4_neg2>
    1080:	14 d0       	rcall	.+40     	; 0x10aa <__udivmodsi4>
    1082:	0a d0       	rcall	.+20     	; 0x1098 <__divmodsi4_neg1>
    1084:	00 1c       	adc	r0, r0
    1086:	38 f4       	brcc	.+14     	; 0x1096 <__divmodsi4_exit>

00001088 <__divmodsi4_neg2>:
    1088:	50 95       	com	r21
    108a:	40 95       	com	r20
    108c:	30 95       	com	r19
    108e:	21 95       	neg	r18
    1090:	3f 4f       	sbci	r19, 0xFF	; 255
    1092:	4f 4f       	sbci	r20, 0xFF	; 255
    1094:	5f 4f       	sbci	r21, 0xFF	; 255

00001096 <__divmodsi4_exit>:
    1096:	08 95       	ret

00001098 <__divmodsi4_neg1>:
    1098:	f6 f7       	brtc	.-4      	; 0x1096 <__divmodsi4_exit>
    109a:	90 95       	com	r25
    109c:	80 95       	com	r24
    109e:	70 95       	com	r23
    10a0:	61 95       	neg	r22
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	8f 4f       	sbci	r24, 0xFF	; 255
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	08 95       	ret

000010aa <__udivmodsi4>:
    10aa:	a1 e2       	ldi	r26, 0x21	; 33
    10ac:	1a 2e       	mov	r1, r26
    10ae:	aa 1b       	sub	r26, r26
    10b0:	bb 1b       	sub	r27, r27
    10b2:	fd 01       	movw	r30, r26
    10b4:	0d c0       	rjmp	.+26     	; 0x10d0 <__udivmodsi4_ep>

000010b6 <__udivmodsi4_loop>:
    10b6:	aa 1f       	adc	r26, r26
    10b8:	bb 1f       	adc	r27, r27
    10ba:	ee 1f       	adc	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	a2 17       	cp	r26, r18
    10c0:	b3 07       	cpc	r27, r19
    10c2:	e4 07       	cpc	r30, r20
    10c4:	f5 07       	cpc	r31, r21
    10c6:	20 f0       	brcs	.+8      	; 0x10d0 <__udivmodsi4_ep>
    10c8:	a2 1b       	sub	r26, r18
    10ca:	b3 0b       	sbc	r27, r19
    10cc:	e4 0b       	sbc	r30, r20
    10ce:	f5 0b       	sbc	r31, r21

000010d0 <__udivmodsi4_ep>:
    10d0:	66 1f       	adc	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	88 1f       	adc	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	1a 94       	dec	r1
    10da:	69 f7       	brne	.-38     	; 0x10b6 <__udivmodsi4_loop>
    10dc:	60 95       	com	r22
    10de:	70 95       	com	r23
    10e0:	80 95       	com	r24
    10e2:	90 95       	com	r25
    10e4:	9b 01       	movw	r18, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	bd 01       	movw	r22, r26
    10ea:	cf 01       	movw	r24, r30
    10ec:	08 95       	ret

000010ee <sprintf>:
    10ee:	ae e0       	ldi	r26, 0x0E	; 14
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ed e7       	ldi	r30, 0x7D	; 125
    10f4:	f8 e0       	ldi	r31, 0x08	; 8
    10f6:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__prologue_saves__+0x1c>
    10fa:	0d 89       	ldd	r16, Y+21	; 0x15
    10fc:	1e 89       	ldd	r17, Y+22	; 0x16
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	8c 83       	std	Y+4, r24	; 0x04
    1102:	1a 83       	std	Y+2, r17	; 0x02
    1104:	09 83       	std	Y+1, r16	; 0x01
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	9f e7       	ldi	r25, 0x7F	; 127
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	9e 01       	movw	r18, r28
    1110:	27 5e       	subi	r18, 0xE7	; 231
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	6f 89       	ldd	r22, Y+23	; 0x17
    111a:	78 8d       	ldd	r23, Y+24	; 0x18
    111c:	a9 01       	movw	r20, r18
    111e:	0e 94 9b 08 	call	0x1136	; 0x1136 <vfprintf>
    1122:	2f 81       	ldd	r18, Y+7	; 0x07
    1124:	38 85       	ldd	r19, Y+8	; 0x08
    1126:	02 0f       	add	r16, r18
    1128:	13 1f       	adc	r17, r19
    112a:	f8 01       	movw	r30, r16
    112c:	10 82       	st	Z, r1
    112e:	2e 96       	adiw	r28, 0x0e	; 14
    1130:	e4 e0       	ldi	r30, 0x04	; 4
    1132:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__epilogue_restores__+0x1c>

00001136 <vfprintf>:
    1136:	ab e0       	ldi	r26, 0x0B	; 11
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e1 ea       	ldi	r30, 0xA1	; 161
    113c:	f8 e0       	ldi	r31, 0x08	; 8
    113e:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__prologue_saves__>
    1142:	3c 01       	movw	r6, r24
    1144:	2b 01       	movw	r4, r22
    1146:	5a 01       	movw	r10, r20
    1148:	fc 01       	movw	r30, r24
    114a:	17 82       	std	Z+7, r1	; 0x07
    114c:	16 82       	std	Z+6, r1	; 0x06
    114e:	83 81       	ldd	r24, Z+3	; 0x03
    1150:	81 fd       	sbrc	r24, 1
    1152:	03 c0       	rjmp	.+6      	; 0x115a <vfprintf+0x24>
    1154:	6f ef       	ldi	r22, 0xFF	; 255
    1156:	7f ef       	ldi	r23, 0xFF	; 255
    1158:	c6 c1       	rjmp	.+908    	; 0x14e6 <vfprintf+0x3b0>
    115a:	9a e0       	ldi	r25, 0x0A	; 10
    115c:	89 2e       	mov	r8, r25
    115e:	1e 01       	movw	r2, r28
    1160:	08 94       	sec
    1162:	21 1c       	adc	r2, r1
    1164:	31 1c       	adc	r3, r1
    1166:	f3 01       	movw	r30, r6
    1168:	23 81       	ldd	r18, Z+3	; 0x03
    116a:	f2 01       	movw	r30, r4
    116c:	23 fd       	sbrc	r18, 3
    116e:	85 91       	lpm	r24, Z+
    1170:	23 ff       	sbrs	r18, 3
    1172:	81 91       	ld	r24, Z+
    1174:	2f 01       	movw	r4, r30
    1176:	88 23       	and	r24, r24
    1178:	09 f4       	brne	.+2      	; 0x117c <vfprintf+0x46>
    117a:	b2 c1       	rjmp	.+868    	; 0x14e0 <vfprintf+0x3aa>
    117c:	85 32       	cpi	r24, 0x25	; 37
    117e:	39 f4       	brne	.+14     	; 0x118e <vfprintf+0x58>
    1180:	23 fd       	sbrc	r18, 3
    1182:	85 91       	lpm	r24, Z+
    1184:	23 ff       	sbrs	r18, 3
    1186:	81 91       	ld	r24, Z+
    1188:	2f 01       	movw	r4, r30
    118a:	85 32       	cpi	r24, 0x25	; 37
    118c:	29 f4       	brne	.+10     	; 0x1198 <vfprintf+0x62>
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	b3 01       	movw	r22, r6
    1192:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1196:	e7 cf       	rjmp	.-50     	; 0x1166 <vfprintf+0x30>
    1198:	98 2f       	mov	r25, r24
    119a:	ff 24       	eor	r15, r15
    119c:	ee 24       	eor	r14, r14
    119e:	99 24       	eor	r9, r9
    11a0:	ff e1       	ldi	r31, 0x1F	; 31
    11a2:	ff 15       	cp	r31, r15
    11a4:	d0 f0       	brcs	.+52     	; 0x11da <vfprintf+0xa4>
    11a6:	9b 32       	cpi	r25, 0x2B	; 43
    11a8:	69 f0       	breq	.+26     	; 0x11c4 <vfprintf+0x8e>
    11aa:	9c 32       	cpi	r25, 0x2C	; 44
    11ac:	28 f4       	brcc	.+10     	; 0x11b8 <vfprintf+0x82>
    11ae:	90 32       	cpi	r25, 0x20	; 32
    11b0:	59 f0       	breq	.+22     	; 0x11c8 <vfprintf+0x92>
    11b2:	93 32       	cpi	r25, 0x23	; 35
    11b4:	91 f4       	brne	.+36     	; 0x11da <vfprintf+0xa4>
    11b6:	0e c0       	rjmp	.+28     	; 0x11d4 <vfprintf+0x9e>
    11b8:	9d 32       	cpi	r25, 0x2D	; 45
    11ba:	49 f0       	breq	.+18     	; 0x11ce <vfprintf+0x98>
    11bc:	90 33       	cpi	r25, 0x30	; 48
    11be:	69 f4       	brne	.+26     	; 0x11da <vfprintf+0xa4>
    11c0:	41 e0       	ldi	r20, 0x01	; 1
    11c2:	24 c0       	rjmp	.+72     	; 0x120c <vfprintf+0xd6>
    11c4:	52 e0       	ldi	r21, 0x02	; 2
    11c6:	f5 2a       	or	r15, r21
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	f8 2a       	or	r15, r24
    11cc:	28 c0       	rjmp	.+80     	; 0x121e <vfprintf+0xe8>
    11ce:	98 e0       	ldi	r25, 0x08	; 8
    11d0:	f9 2a       	or	r15, r25
    11d2:	25 c0       	rjmp	.+74     	; 0x121e <vfprintf+0xe8>
    11d4:	e0 e1       	ldi	r30, 0x10	; 16
    11d6:	fe 2a       	or	r15, r30
    11d8:	22 c0       	rjmp	.+68     	; 0x121e <vfprintf+0xe8>
    11da:	f7 fc       	sbrc	r15, 7
    11dc:	29 c0       	rjmp	.+82     	; 0x1230 <vfprintf+0xfa>
    11de:	89 2f       	mov	r24, r25
    11e0:	80 53       	subi	r24, 0x30	; 48
    11e2:	8a 30       	cpi	r24, 0x0A	; 10
    11e4:	70 f4       	brcc	.+28     	; 0x1202 <vfprintf+0xcc>
    11e6:	f6 fe       	sbrs	r15, 6
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <vfprintf+0xbe>
    11ea:	98 9c       	mul	r9, r8
    11ec:	90 2c       	mov	r9, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	98 0e       	add	r9, r24
    11f2:	15 c0       	rjmp	.+42     	; 0x121e <vfprintf+0xe8>
    11f4:	e8 9c       	mul	r14, r8
    11f6:	e0 2c       	mov	r14, r0
    11f8:	11 24       	eor	r1, r1
    11fa:	e8 0e       	add	r14, r24
    11fc:	f0 e2       	ldi	r31, 0x20	; 32
    11fe:	ff 2a       	or	r15, r31
    1200:	0e c0       	rjmp	.+28     	; 0x121e <vfprintf+0xe8>
    1202:	9e 32       	cpi	r25, 0x2E	; 46
    1204:	29 f4       	brne	.+10     	; 0x1210 <vfprintf+0xda>
    1206:	f6 fc       	sbrc	r15, 6
    1208:	6b c1       	rjmp	.+726    	; 0x14e0 <vfprintf+0x3aa>
    120a:	40 e4       	ldi	r20, 0x40	; 64
    120c:	f4 2a       	or	r15, r20
    120e:	07 c0       	rjmp	.+14     	; 0x121e <vfprintf+0xe8>
    1210:	9c 36       	cpi	r25, 0x6C	; 108
    1212:	19 f4       	brne	.+6      	; 0x121a <vfprintf+0xe4>
    1214:	50 e8       	ldi	r21, 0x80	; 128
    1216:	f5 2a       	or	r15, r21
    1218:	02 c0       	rjmp	.+4      	; 0x121e <vfprintf+0xe8>
    121a:	98 36       	cpi	r25, 0x68	; 104
    121c:	49 f4       	brne	.+18     	; 0x1230 <vfprintf+0xfa>
    121e:	f2 01       	movw	r30, r4
    1220:	23 fd       	sbrc	r18, 3
    1222:	95 91       	lpm	r25, Z+
    1224:	23 ff       	sbrs	r18, 3
    1226:	91 91       	ld	r25, Z+
    1228:	2f 01       	movw	r4, r30
    122a:	99 23       	and	r25, r25
    122c:	09 f0       	breq	.+2      	; 0x1230 <vfprintf+0xfa>
    122e:	b8 cf       	rjmp	.-144    	; 0x11a0 <vfprintf+0x6a>
    1230:	89 2f       	mov	r24, r25
    1232:	85 54       	subi	r24, 0x45	; 69
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	18 f0       	brcs	.+6      	; 0x123e <vfprintf+0x108>
    1238:	80 52       	subi	r24, 0x20	; 32
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	38 f4       	brcc	.+14     	; 0x124c <vfprintf+0x116>
    123e:	44 e0       	ldi	r20, 0x04	; 4
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	a4 0e       	add	r10, r20
    1244:	b5 1e       	adc	r11, r21
    1246:	5f e3       	ldi	r21, 0x3F	; 63
    1248:	59 83       	std	Y+1, r21	; 0x01
    124a:	0f c0       	rjmp	.+30     	; 0x126a <vfprintf+0x134>
    124c:	93 36       	cpi	r25, 0x63	; 99
    124e:	31 f0       	breq	.+12     	; 0x125c <vfprintf+0x126>
    1250:	93 37       	cpi	r25, 0x73	; 115
    1252:	79 f0       	breq	.+30     	; 0x1272 <vfprintf+0x13c>
    1254:	93 35       	cpi	r25, 0x53	; 83
    1256:	09 f0       	breq	.+2      	; 0x125a <vfprintf+0x124>
    1258:	56 c0       	rjmp	.+172    	; 0x1306 <vfprintf+0x1d0>
    125a:	20 c0       	rjmp	.+64     	; 0x129c <vfprintf+0x166>
    125c:	f5 01       	movw	r30, r10
    125e:	80 81       	ld	r24, Z
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	42 e0       	ldi	r20, 0x02	; 2
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	a4 0e       	add	r10, r20
    1268:	b5 1e       	adc	r11, r21
    126a:	61 01       	movw	r12, r2
    126c:	01 e0       	ldi	r16, 0x01	; 1
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	12 c0       	rjmp	.+36     	; 0x1296 <vfprintf+0x160>
    1272:	f5 01       	movw	r30, r10
    1274:	c0 80       	ld	r12, Z
    1276:	d1 80       	ldd	r13, Z+1	; 0x01
    1278:	f6 fc       	sbrc	r15, 6
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <vfprintf+0x14c>
    127c:	6f ef       	ldi	r22, 0xFF	; 255
    127e:	7f ef       	ldi	r23, 0xFF	; 255
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <vfprintf+0x150>
    1282:	69 2d       	mov	r22, r9
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	42 e0       	ldi	r20, 0x02	; 2
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	a4 0e       	add	r10, r20
    128c:	b5 1e       	adc	r11, r21
    128e:	c6 01       	movw	r24, r12
    1290:	0e 94 88 0a 	call	0x1510	; 0x1510 <strnlen>
    1294:	8c 01       	movw	r16, r24
    1296:	5f e7       	ldi	r21, 0x7F	; 127
    1298:	f5 22       	and	r15, r21
    129a:	14 c0       	rjmp	.+40     	; 0x12c4 <vfprintf+0x18e>
    129c:	f5 01       	movw	r30, r10
    129e:	c0 80       	ld	r12, Z
    12a0:	d1 80       	ldd	r13, Z+1	; 0x01
    12a2:	f6 fc       	sbrc	r15, 6
    12a4:	03 c0       	rjmp	.+6      	; 0x12ac <vfprintf+0x176>
    12a6:	6f ef       	ldi	r22, 0xFF	; 255
    12a8:	7f ef       	ldi	r23, 0xFF	; 255
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <vfprintf+0x17a>
    12ac:	69 2d       	mov	r22, r9
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	42 e0       	ldi	r20, 0x02	; 2
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	a4 0e       	add	r10, r20
    12b6:	b5 1e       	adc	r11, r21
    12b8:	c6 01       	movw	r24, r12
    12ba:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <strnlen_P>
    12be:	8c 01       	movw	r16, r24
    12c0:	50 e8       	ldi	r21, 0x80	; 128
    12c2:	f5 2a       	or	r15, r21
    12c4:	f3 fe       	sbrs	r15, 3
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <vfprintf+0x1a0>
    12c8:	1a c0       	rjmp	.+52     	; 0x12fe <vfprintf+0x1c8>
    12ca:	80 e2       	ldi	r24, 0x20	; 32
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	b3 01       	movw	r22, r6
    12d0:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    12d4:	ea 94       	dec	r14
    12d6:	8e 2d       	mov	r24, r14
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	08 17       	cp	r16, r24
    12dc:	19 07       	cpc	r17, r25
    12de:	a8 f3       	brcs	.-22     	; 0x12ca <vfprintf+0x194>
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <vfprintf+0x1c8>
    12e2:	f6 01       	movw	r30, r12
    12e4:	f7 fc       	sbrc	r15, 7
    12e6:	85 91       	lpm	r24, Z+
    12e8:	f7 fe       	sbrs	r15, 7
    12ea:	81 91       	ld	r24, Z+
    12ec:	6f 01       	movw	r12, r30
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	b3 01       	movw	r22, r6
    12f2:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    12f6:	e1 10       	cpse	r14, r1
    12f8:	ea 94       	dec	r14
    12fa:	01 50       	subi	r16, 0x01	; 1
    12fc:	10 40       	sbci	r17, 0x00	; 0
    12fe:	01 15       	cp	r16, r1
    1300:	11 05       	cpc	r17, r1
    1302:	79 f7       	brne	.-34     	; 0x12e2 <vfprintf+0x1ac>
    1304:	ea c0       	rjmp	.+468    	; 0x14da <vfprintf+0x3a4>
    1306:	94 36       	cpi	r25, 0x64	; 100
    1308:	11 f0       	breq	.+4      	; 0x130e <vfprintf+0x1d8>
    130a:	99 36       	cpi	r25, 0x69	; 105
    130c:	69 f5       	brne	.+90     	; 0x1368 <vfprintf+0x232>
    130e:	f7 fe       	sbrs	r15, 7
    1310:	08 c0       	rjmp	.+16     	; 0x1322 <vfprintf+0x1ec>
    1312:	f5 01       	movw	r30, r10
    1314:	20 81       	ld	r18, Z
    1316:	31 81       	ldd	r19, Z+1	; 0x01
    1318:	42 81       	ldd	r20, Z+2	; 0x02
    131a:	53 81       	ldd	r21, Z+3	; 0x03
    131c:	84 e0       	ldi	r24, 0x04	; 4
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0a c0       	rjmp	.+20     	; 0x1336 <vfprintf+0x200>
    1322:	f5 01       	movw	r30, r10
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	9c 01       	movw	r18, r24
    132a:	44 27       	eor	r20, r20
    132c:	37 fd       	sbrc	r19, 7
    132e:	40 95       	com	r20
    1330:	54 2f       	mov	r21, r20
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a8 0e       	add	r10, r24
    1338:	b9 1e       	adc	r11, r25
    133a:	9f e6       	ldi	r25, 0x6F	; 111
    133c:	f9 22       	and	r15, r25
    133e:	57 ff       	sbrs	r21, 7
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <vfprintf+0x21e>
    1342:	50 95       	com	r21
    1344:	40 95       	com	r20
    1346:	30 95       	com	r19
    1348:	21 95       	neg	r18
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	4f 4f       	sbci	r20, 0xFF	; 255
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	e0 e8       	ldi	r30, 0x80	; 128
    1352:	fe 2a       	or	r15, r30
    1354:	ca 01       	movw	r24, r20
    1356:	b9 01       	movw	r22, r18
    1358:	a1 01       	movw	r20, r2
    135a:	2a e0       	ldi	r18, 0x0A	; 10
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	0e 94 bf 0a 	call	0x157e	; 0x157e <__ultoa_invert>
    1362:	d8 2e       	mov	r13, r24
    1364:	d2 18       	sub	r13, r2
    1366:	40 c0       	rjmp	.+128    	; 0x13e8 <vfprintf+0x2b2>
    1368:	95 37       	cpi	r25, 0x75	; 117
    136a:	29 f4       	brne	.+10     	; 0x1376 <vfprintf+0x240>
    136c:	1f 2d       	mov	r17, r15
    136e:	1f 7e       	andi	r17, 0xEF	; 239
    1370:	2a e0       	ldi	r18, 0x0A	; 10
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	1d c0       	rjmp	.+58     	; 0x13b0 <vfprintf+0x27a>
    1376:	1f 2d       	mov	r17, r15
    1378:	19 7f       	andi	r17, 0xF9	; 249
    137a:	9f 36       	cpi	r25, 0x6F	; 111
    137c:	61 f0       	breq	.+24     	; 0x1396 <vfprintf+0x260>
    137e:	90 37       	cpi	r25, 0x70	; 112
    1380:	20 f4       	brcc	.+8      	; 0x138a <vfprintf+0x254>
    1382:	98 35       	cpi	r25, 0x58	; 88
    1384:	09 f0       	breq	.+2      	; 0x1388 <vfprintf+0x252>
    1386:	ac c0       	rjmp	.+344    	; 0x14e0 <vfprintf+0x3aa>
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <vfprintf+0x272>
    138a:	90 37       	cpi	r25, 0x70	; 112
    138c:	39 f0       	breq	.+14     	; 0x139c <vfprintf+0x266>
    138e:	98 37       	cpi	r25, 0x78	; 120
    1390:	09 f0       	breq	.+2      	; 0x1394 <vfprintf+0x25e>
    1392:	a6 c0       	rjmp	.+332    	; 0x14e0 <vfprintf+0x3aa>
    1394:	04 c0       	rjmp	.+8      	; 0x139e <vfprintf+0x268>
    1396:	28 e0       	ldi	r18, 0x08	; 8
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	0a c0       	rjmp	.+20     	; 0x13b0 <vfprintf+0x27a>
    139c:	10 61       	ori	r17, 0x10	; 16
    139e:	14 fd       	sbrc	r17, 4
    13a0:	14 60       	ori	r17, 0x04	; 4
    13a2:	20 e1       	ldi	r18, 0x10	; 16
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <vfprintf+0x27a>
    13a8:	14 fd       	sbrc	r17, 4
    13aa:	16 60       	ori	r17, 0x06	; 6
    13ac:	20 e1       	ldi	r18, 0x10	; 16
    13ae:	32 e0       	ldi	r19, 0x02	; 2
    13b0:	17 ff       	sbrs	r17, 7
    13b2:	08 c0       	rjmp	.+16     	; 0x13c4 <vfprintf+0x28e>
    13b4:	f5 01       	movw	r30, r10
    13b6:	60 81       	ld	r22, Z
    13b8:	71 81       	ldd	r23, Z+1	; 0x01
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	44 e0       	ldi	r20, 0x04	; 4
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	08 c0       	rjmp	.+16     	; 0x13d4 <vfprintf+0x29e>
    13c4:	f5 01       	movw	r30, r10
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	bc 01       	movw	r22, r24
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	42 e0       	ldi	r20, 0x02	; 2
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	a4 0e       	add	r10, r20
    13d6:	b5 1e       	adc	r11, r21
    13d8:	a1 01       	movw	r20, r2
    13da:	0e 94 bf 0a 	call	0x157e	; 0x157e <__ultoa_invert>
    13de:	d8 2e       	mov	r13, r24
    13e0:	d2 18       	sub	r13, r2
    13e2:	8f e7       	ldi	r24, 0x7F	; 127
    13e4:	f8 2e       	mov	r15, r24
    13e6:	f1 22       	and	r15, r17
    13e8:	f6 fe       	sbrs	r15, 6
    13ea:	0b c0       	rjmp	.+22     	; 0x1402 <vfprintf+0x2cc>
    13ec:	5e ef       	ldi	r21, 0xFE	; 254
    13ee:	f5 22       	and	r15, r21
    13f0:	d9 14       	cp	r13, r9
    13f2:	38 f4       	brcc	.+14     	; 0x1402 <vfprintf+0x2cc>
    13f4:	f4 fe       	sbrs	r15, 4
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <vfprintf+0x2d0>
    13f8:	f2 fc       	sbrc	r15, 2
    13fa:	05 c0       	rjmp	.+10     	; 0x1406 <vfprintf+0x2d0>
    13fc:	8f ee       	ldi	r24, 0xEF	; 239
    13fe:	f8 22       	and	r15, r24
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <vfprintf+0x2d0>
    1402:	1d 2d       	mov	r17, r13
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <vfprintf+0x2d2>
    1406:	19 2d       	mov	r17, r9
    1408:	f4 fe       	sbrs	r15, 4
    140a:	0d c0       	rjmp	.+26     	; 0x1426 <vfprintf+0x2f0>
    140c:	fe 01       	movw	r30, r28
    140e:	ed 0d       	add	r30, r13
    1410:	f1 1d       	adc	r31, r1
    1412:	80 81       	ld	r24, Z
    1414:	80 33       	cpi	r24, 0x30	; 48
    1416:	19 f4       	brne	.+6      	; 0x141e <vfprintf+0x2e8>
    1418:	99 ee       	ldi	r25, 0xE9	; 233
    141a:	f9 22       	and	r15, r25
    141c:	08 c0       	rjmp	.+16     	; 0x142e <vfprintf+0x2f8>
    141e:	1f 5f       	subi	r17, 0xFF	; 255
    1420:	f2 fe       	sbrs	r15, 2
    1422:	05 c0       	rjmp	.+10     	; 0x142e <vfprintf+0x2f8>
    1424:	03 c0       	rjmp	.+6      	; 0x142c <vfprintf+0x2f6>
    1426:	8f 2d       	mov	r24, r15
    1428:	86 78       	andi	r24, 0x86	; 134
    142a:	09 f0       	breq	.+2      	; 0x142e <vfprintf+0x2f8>
    142c:	1f 5f       	subi	r17, 0xFF	; 255
    142e:	0f 2d       	mov	r16, r15
    1430:	f3 fc       	sbrc	r15, 3
    1432:	14 c0       	rjmp	.+40     	; 0x145c <vfprintf+0x326>
    1434:	f0 fe       	sbrs	r15, 0
    1436:	0f c0       	rjmp	.+30     	; 0x1456 <vfprintf+0x320>
    1438:	1e 15       	cp	r17, r14
    143a:	10 f0       	brcs	.+4      	; 0x1440 <vfprintf+0x30a>
    143c:	9d 2c       	mov	r9, r13
    143e:	0b c0       	rjmp	.+22     	; 0x1456 <vfprintf+0x320>
    1440:	9d 2c       	mov	r9, r13
    1442:	9e 0c       	add	r9, r14
    1444:	91 1a       	sub	r9, r17
    1446:	1e 2d       	mov	r17, r14
    1448:	06 c0       	rjmp	.+12     	; 0x1456 <vfprintf+0x320>
    144a:	80 e2       	ldi	r24, 0x20	; 32
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	b3 01       	movw	r22, r6
    1450:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1454:	1f 5f       	subi	r17, 0xFF	; 255
    1456:	1e 15       	cp	r17, r14
    1458:	c0 f3       	brcs	.-16     	; 0x144a <vfprintf+0x314>
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <vfprintf+0x32e>
    145c:	1e 15       	cp	r17, r14
    145e:	10 f4       	brcc	.+4      	; 0x1464 <vfprintf+0x32e>
    1460:	e1 1a       	sub	r14, r17
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <vfprintf+0x330>
    1464:	ee 24       	eor	r14, r14
    1466:	04 ff       	sbrs	r16, 4
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <vfprintf+0x352>
    146a:	80 e3       	ldi	r24, 0x30	; 48
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	b3 01       	movw	r22, r6
    1470:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1474:	02 ff       	sbrs	r16, 2
    1476:	1d c0       	rjmp	.+58     	; 0x14b2 <vfprintf+0x37c>
    1478:	01 fd       	sbrc	r16, 1
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <vfprintf+0x34c>
    147c:	88 e7       	ldi	r24, 0x78	; 120
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e c0       	rjmp	.+28     	; 0x149e <vfprintf+0x368>
    1482:	88 e5       	ldi	r24, 0x58	; 88
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0b c0       	rjmp	.+22     	; 0x149e <vfprintf+0x368>
    1488:	80 2f       	mov	r24, r16
    148a:	86 78       	andi	r24, 0x86	; 134
    148c:	91 f0       	breq	.+36     	; 0x14b2 <vfprintf+0x37c>
    148e:	01 ff       	sbrs	r16, 1
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0x360>
    1492:	8b e2       	ldi	r24, 0x2B	; 43
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <vfprintf+0x362>
    1496:	80 e2       	ldi	r24, 0x20	; 32
    1498:	f7 fc       	sbrc	r15, 7
    149a:	8d e2       	ldi	r24, 0x2D	; 45
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	b3 01       	movw	r22, r6
    14a0:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <vfprintf+0x37c>
    14a6:	80 e3       	ldi	r24, 0x30	; 48
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	b3 01       	movw	r22, r6
    14ac:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    14b0:	9a 94       	dec	r9
    14b2:	d9 14       	cp	r13, r9
    14b4:	c0 f3       	brcs	.-16     	; 0x14a6 <vfprintf+0x370>
    14b6:	da 94       	dec	r13
    14b8:	f1 01       	movw	r30, r2
    14ba:	ed 0d       	add	r30, r13
    14bc:	f1 1d       	adc	r31, r1
    14be:	80 81       	ld	r24, Z
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	b3 01       	movw	r22, r6
    14c4:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    14c8:	dd 20       	and	r13, r13
    14ca:	a9 f7       	brne	.-22     	; 0x14b6 <vfprintf+0x380>
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <vfprintf+0x3a4>
    14ce:	80 e2       	ldi	r24, 0x20	; 32
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	b3 01       	movw	r22, r6
    14d4:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    14d8:	ea 94       	dec	r14
    14da:	ee 20       	and	r14, r14
    14dc:	c1 f7       	brne	.-16     	; 0x14ce <vfprintf+0x398>
    14de:	43 ce       	rjmp	.-890    	; 0x1166 <vfprintf+0x30>
    14e0:	f3 01       	movw	r30, r6
    14e2:	66 81       	ldd	r22, Z+6	; 0x06
    14e4:	77 81       	ldd	r23, Z+7	; 0x07
    14e6:	cb 01       	movw	r24, r22
    14e8:	2b 96       	adiw	r28, 0x0b	; 11
    14ea:	e2 e1       	ldi	r30, 0x12	; 18
    14ec:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__epilogue_restores__>

000014f0 <__eewr_word_m328p>:
    14f0:	0e 94 1d 0b 	call	0x163a	; 0x163a <__eewr_byte_m328p>
    14f4:	27 2f       	mov	r18, r23
    14f6:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__eewr_r18_m328p>

000014fa <strnlen_P>:
    14fa:	fc 01       	movw	r30, r24
    14fc:	05 90       	lpm	r0, Z+
    14fe:	61 50       	subi	r22, 0x01	; 1
    1500:	70 40       	sbci	r23, 0x00	; 0
    1502:	01 10       	cpse	r0, r1
    1504:	d8 f7       	brcc	.-10     	; 0x14fc <strnlen_P+0x2>
    1506:	80 95       	com	r24
    1508:	90 95       	com	r25
    150a:	8e 0f       	add	r24, r30
    150c:	9f 1f       	adc	r25, r31
    150e:	08 95       	ret

00001510 <strnlen>:
    1510:	fc 01       	movw	r30, r24
    1512:	61 50       	subi	r22, 0x01	; 1
    1514:	70 40       	sbci	r23, 0x00	; 0
    1516:	01 90       	ld	r0, Z+
    1518:	01 10       	cpse	r0, r1
    151a:	d8 f7       	brcc	.-10     	; 0x1512 <strnlen+0x2>
    151c:	80 95       	com	r24
    151e:	90 95       	com	r25
    1520:	8e 0f       	add	r24, r30
    1522:	9f 1f       	adc	r25, r31
    1524:	08 95       	ret

00001526 <fputc>:
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	8c 01       	movw	r16, r24
    1530:	eb 01       	movw	r28, r22
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	81 ff       	sbrs	r24, 1
    1536:	1b c0       	rjmp	.+54     	; 0x156e <fputc+0x48>
    1538:	82 ff       	sbrs	r24, 2
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <fputc+0x30>
    153c:	2e 81       	ldd	r18, Y+6	; 0x06
    153e:	3f 81       	ldd	r19, Y+7	; 0x07
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	28 17       	cp	r18, r24
    1546:	39 07       	cpc	r19, r25
    1548:	64 f4       	brge	.+24     	; 0x1562 <fputc+0x3c>
    154a:	e8 81       	ld	r30, Y
    154c:	f9 81       	ldd	r31, Y+1	; 0x01
    154e:	01 93       	st	Z+, r16
    1550:	f9 83       	std	Y+1, r31	; 0x01
    1552:	e8 83       	st	Y, r30
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <fputc+0x3c>
    1556:	e8 85       	ldd	r30, Y+8	; 0x08
    1558:	f9 85       	ldd	r31, Y+9	; 0x09
    155a:	80 2f       	mov	r24, r16
    155c:	09 95       	icall
    155e:	89 2b       	or	r24, r25
    1560:	31 f4       	brne	.+12     	; 0x156e <fputc+0x48>
    1562:	8e 81       	ldd	r24, Y+6	; 0x06
    1564:	9f 81       	ldd	r25, Y+7	; 0x07
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	9f 83       	std	Y+7, r25	; 0x07
    156a:	8e 83       	std	Y+6, r24	; 0x06
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <fputc+0x4c>
    156e:	0f ef       	ldi	r16, 0xFF	; 255
    1570:	1f ef       	ldi	r17, 0xFF	; 255
    1572:	c8 01       	movw	r24, r16
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	08 95       	ret

0000157e <__ultoa_invert>:
    157e:	fa 01       	movw	r30, r20
    1580:	aa 27       	eor	r26, r26
    1582:	28 30       	cpi	r18, 0x08	; 8
    1584:	51 f1       	breq	.+84     	; 0x15da <__ultoa_invert+0x5c>
    1586:	20 31       	cpi	r18, 0x10	; 16
    1588:	81 f1       	breq	.+96     	; 0x15ea <__ultoa_invert+0x6c>
    158a:	e8 94       	clt
    158c:	6f 93       	push	r22
    158e:	6e 7f       	andi	r22, 0xFE	; 254
    1590:	6e 5f       	subi	r22, 0xFE	; 254
    1592:	7f 4f       	sbci	r23, 0xFF	; 255
    1594:	8f 4f       	sbci	r24, 0xFF	; 255
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	af 4f       	sbci	r26, 0xFF	; 255
    159a:	b1 e0       	ldi	r27, 0x01	; 1
    159c:	3e d0       	rcall	.+124    	; 0x161a <__ultoa_invert+0x9c>
    159e:	b4 e0       	ldi	r27, 0x04	; 4
    15a0:	3c d0       	rcall	.+120    	; 0x161a <__ultoa_invert+0x9c>
    15a2:	67 0f       	add	r22, r23
    15a4:	78 1f       	adc	r23, r24
    15a6:	89 1f       	adc	r24, r25
    15a8:	9a 1f       	adc	r25, r26
    15aa:	a1 1d       	adc	r26, r1
    15ac:	68 0f       	add	r22, r24
    15ae:	79 1f       	adc	r23, r25
    15b0:	8a 1f       	adc	r24, r26
    15b2:	91 1d       	adc	r25, r1
    15b4:	a1 1d       	adc	r26, r1
    15b6:	6a 0f       	add	r22, r26
    15b8:	71 1d       	adc	r23, r1
    15ba:	81 1d       	adc	r24, r1
    15bc:	91 1d       	adc	r25, r1
    15be:	a1 1d       	adc	r26, r1
    15c0:	20 d0       	rcall	.+64     	; 0x1602 <__ultoa_invert+0x84>
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <__ultoa_invert+0x48>
    15c4:	68 94       	set
    15c6:	3f 91       	pop	r19
    15c8:	2a e0       	ldi	r18, 0x0A	; 10
    15ca:	26 9f       	mul	r18, r22
    15cc:	11 24       	eor	r1, r1
    15ce:	30 19       	sub	r19, r0
    15d0:	30 5d       	subi	r19, 0xD0	; 208
    15d2:	31 93       	st	Z+, r19
    15d4:	de f6       	brtc	.-74     	; 0x158c <__ultoa_invert+0xe>
    15d6:	cf 01       	movw	r24, r30
    15d8:	08 95       	ret
    15da:	46 2f       	mov	r20, r22
    15dc:	47 70       	andi	r20, 0x07	; 7
    15de:	40 5d       	subi	r20, 0xD0	; 208
    15e0:	41 93       	st	Z+, r20
    15e2:	b3 e0       	ldi	r27, 0x03	; 3
    15e4:	0f d0       	rcall	.+30     	; 0x1604 <__ultoa_invert+0x86>
    15e6:	c9 f7       	brne	.-14     	; 0x15da <__ultoa_invert+0x5c>
    15e8:	f6 cf       	rjmp	.-20     	; 0x15d6 <__ultoa_invert+0x58>
    15ea:	46 2f       	mov	r20, r22
    15ec:	4f 70       	andi	r20, 0x0F	; 15
    15ee:	40 5d       	subi	r20, 0xD0	; 208
    15f0:	4a 33       	cpi	r20, 0x3A	; 58
    15f2:	18 f0       	brcs	.+6      	; 0x15fa <__ultoa_invert+0x7c>
    15f4:	49 5d       	subi	r20, 0xD9	; 217
    15f6:	31 fd       	sbrc	r19, 1
    15f8:	40 52       	subi	r20, 0x20	; 32
    15fa:	41 93       	st	Z+, r20
    15fc:	02 d0       	rcall	.+4      	; 0x1602 <__ultoa_invert+0x84>
    15fe:	a9 f7       	brne	.-22     	; 0x15ea <__ultoa_invert+0x6c>
    1600:	ea cf       	rjmp	.-44     	; 0x15d6 <__ultoa_invert+0x58>
    1602:	b4 e0       	ldi	r27, 0x04	; 4
    1604:	a6 95       	lsr	r26
    1606:	97 95       	ror	r25
    1608:	87 95       	ror	r24
    160a:	77 95       	ror	r23
    160c:	67 95       	ror	r22
    160e:	ba 95       	dec	r27
    1610:	c9 f7       	brne	.-14     	; 0x1604 <__ultoa_invert+0x86>
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	61 05       	cpc	r22, r1
    1616:	71 05       	cpc	r23, r1
    1618:	08 95       	ret
    161a:	9b 01       	movw	r18, r22
    161c:	ac 01       	movw	r20, r24
    161e:	0a 2e       	mov	r0, r26
    1620:	06 94       	lsr	r0
    1622:	57 95       	ror	r21
    1624:	47 95       	ror	r20
    1626:	37 95       	ror	r19
    1628:	27 95       	ror	r18
    162a:	ba 95       	dec	r27
    162c:	c9 f7       	brne	.-14     	; 0x1620 <__ultoa_invert+0xa2>
    162e:	62 0f       	add	r22, r18
    1630:	73 1f       	adc	r23, r19
    1632:	84 1f       	adc	r24, r20
    1634:	95 1f       	adc	r25, r21
    1636:	a0 1d       	adc	r26, r0
    1638:	08 95       	ret

0000163a <__eewr_byte_m328p>:
    163a:	26 2f       	mov	r18, r22

0000163c <__eewr_r18_m328p>:
    163c:	f9 99       	sbic	0x1f, 1	; 31
    163e:	fe cf       	rjmp	.-4      	; 0x163c <__eewr_r18_m328p>
    1640:	1f ba       	out	0x1f, r1	; 31
    1642:	92 bd       	out	0x22, r25	; 34
    1644:	81 bd       	out	0x21, r24	; 33
    1646:	20 bd       	out	0x20, r18	; 32
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	fa 9a       	sbi	0x1f, 2	; 31
    164e:	f9 9a       	sbi	0x1f, 1	; 31
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	08 95       	ret

00001656 <__prologue_saves__>:
    1656:	2f 92       	push	r2
    1658:	3f 92       	push	r3
    165a:	4f 92       	push	r4
    165c:	5f 92       	push	r5
    165e:	6f 92       	push	r6
    1660:	7f 92       	push	r7
    1662:	8f 92       	push	r8
    1664:	9f 92       	push	r9
    1666:	af 92       	push	r10
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	ca 1b       	sub	r28, r26
    1680:	db 0b       	sbc	r29, r27
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	09 94       	ijmp

0000168e <__epilogue_restores__>:
    168e:	2a 88       	ldd	r2, Y+18	; 0x12
    1690:	39 88       	ldd	r3, Y+17	; 0x11
    1692:	48 88       	ldd	r4, Y+16	; 0x10
    1694:	5f 84       	ldd	r5, Y+15	; 0x0f
    1696:	6e 84       	ldd	r6, Y+14	; 0x0e
    1698:	7d 84       	ldd	r7, Y+13	; 0x0d
    169a:	8c 84       	ldd	r8, Y+12	; 0x0c
    169c:	9b 84       	ldd	r9, Y+11	; 0x0b
    169e:	aa 84       	ldd	r10, Y+10	; 0x0a
    16a0:	b9 84       	ldd	r11, Y+9	; 0x09
    16a2:	c8 84       	ldd	r12, Y+8	; 0x08
    16a4:	df 80       	ldd	r13, Y+7	; 0x07
    16a6:	ee 80       	ldd	r14, Y+6	; 0x06
    16a8:	fd 80       	ldd	r15, Y+5	; 0x05
    16aa:	0c 81       	ldd	r16, Y+4	; 0x04
    16ac:	1b 81       	ldd	r17, Y+3	; 0x03
    16ae:	aa 81       	ldd	r26, Y+2	; 0x02
    16b0:	b9 81       	ldd	r27, Y+1	; 0x01
    16b2:	ce 0f       	add	r28, r30
    16b4:	d1 1d       	adc	r29, r1
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	ed 01       	movw	r28, r26
    16c2:	08 95       	ret

000016c4 <_exit>:
    16c4:	f8 94       	cli

000016c6 <__stop_program>:
    16c6:	ff cf       	rjmp	.-2      	; 0x16c6 <__stop_program>
